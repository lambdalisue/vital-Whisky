*Vital/Rx/Observable.txt*	Reactive X written in pure Vim script

Author:  Alisue <lambdalisue@hashnote.net>
License: MIT license
Support: Vim 8.0.0000 and above
Support: Neovim 0.2.0 and above


=============================================================================
CONTENTS			*Vital.Rx.Observable-content*

INTRODUCTION			|Vital.Rx.Observable-introduction|
FUNCTIONS			|Vital.Rx.Observable-functions|
  BASIC				|Vital.Rx.Observable-functions-basic|
  CREATION			|Vital.Rx.Observable-functions-creation|
  COMBINATION			|Vital.Rx.Observable-functions-combination|


=============================================================================
INTRODUCTION			*Vital.Rx.Observable-introduction*

*Vital.Rx.Observable* is ReactiveX written in pure Vim script.
It internally uses |Vital.Async.Observable| and extends that interface.


=============================================================================
FUNCTIONS			*Vital.Rx.Observable-functions*

-----------------------------------------------------------------------------
BASIC				*Vital.Rx.Observable-functions-basic*

new({subscriber})			*Vital.Rx.Observable.new()*

	See |Vital.Async.Observable.new()|.

of([{item}, ...])			*Vital.Rx.Observable.of()*

	See |Vital.Async.Observable.of()|.

from({value})				*Vital.Rx.Observable.from()*

	See |Vital.Async.Observable.from()|.

wait({subscription}[, {options}])	*Vital.Rx.Observable.wait()*

	See |Vital.Async.Observable.wait()|.

is_observable({value})		*Vital.Rx.Observable.is_observable()*

	See |Vital.Async.Observable.is_observable()|.

-----------------------------------------------------------------------------
CREATION			*Vital.Rx.Observable-functions-creation*

empty()					*Vital.Rx.Observable.empty()*

	Return an observable which immediately complete.

never()					*Vital.Rx.Observable.never()*

	Return an observable which never complete.

range({start}, {count})			*Vital.Rx.Observable.range()*

	Return an observable which emits numbers from {start} to
	{count} then complete.

scalar({value})				*Vital.Rx.Observable.scalar()*

	Return an observable which emits the {scalar} then complete.

throw_error({error})			*Vital.Rx.Observable.throw_error()*

	Return an observable which immediately throw {error}.

interval({period})			*Vital.Rx.Observable.interval()*

	Return an observable which emits numbers like 0, 1, 2,... with
	given {period} until be terminated.

timer({delay}[, {period}])		*Vital.Rx.Observable.timer()*

	Return an observable which emits 0 then complete after {delay} when no
	{period} is given. When {period} is given, it continue emitting like
	|Vital.Rx.Observable.interval()|.

-----------------------------------------------------------------------------
COMBINATION			*Vital.Rx.Observable-functions-combination*

combine_latest([{sources}...])		*Vital.Rx.Observable.combine_latest()*

	Returns an observable which is the result of combinations the latest
	items in each {sources}. It is similar to Zip operator.
>
        -1-----2------------------3--4-------5---|-->
        ---A-----B---------C-D-------------------|-->

	---1---2-2---------2-2----3--4-------5---|-->
	---A---A-B---------C-D----D--D-------D---|-->
<

concat([{sources}...])		*Vital.Rx.Observable.concat()*

	Returns an observable which is a result of concatanation of {sources}.
>
        -1--1--2--|--------------------------------->
        ---A-----B-|-------------------------------->

        -1--1--2-----A-----B-|---------------------->
<

merge([{sources}...])		*Vital.Rx.Observable.merge()*

	Returns an observable which is a result of merge of {sources}.
>
        -1--1--2--|--------------------------------->
        ---A-----B-|-------------------------------->

        -1-A1--2-B|--------------------------------->
<

race([{sources}...])		*Vital.Rx.Observable.race()*

	Returns an observable which emits the item first in {sources}
>
        -----1---1-1-------------------------------->
        -1--1--2------------------------------------>
        ---A-----B---------------------------------->

        -1--1--2------------------------------------>
<

zip([{sources}...])		*Vital.Rx.Observable.zip()*

	Returns an observable which is a result of zip of {sources}
>
        -1-----2------------------3--4-------5---|-->
        ---A-----B---------C-D-------------------|-->

	---1-----2----------------3--4-----------|-->
	---A-----B----------------C--D-----------|-->
<
=============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
