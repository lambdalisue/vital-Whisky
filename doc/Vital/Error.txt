*Vital/Error.txt*		A generic error propagation module

Author : Alisue <lambdalisue@hashnote.net>
License: MIT license
Support: Vim 8.0.0000 and above
Support: Neovim 0.2.0 and above


==============================================================================
CONTENTS				*Vital.Error-contents*

INTRODUCTION			|Vital.Error-introduction|
VARIABLE			|Vital.Error-variable|
FUNCTION			|Vital.Error-function|
INSTANCE			|Vital.Error-instance|


==============================================================================
INTRODUCTION				*Vital.Error-introduction*

*Vital.Error* is a plugin to provide a generic error propagation
>
	let s:Error = vital#vital#import('Error')
	
	function! s:with_throw() abort
	  try
	    try
	      throw 'This is an exception message'
	    catch
	      " Create an error instance from v:exception and re-throw
	      " to propagate exception/throwpoint
	      call s:Error.catch().throw()
	    endtry
	  catch
	    " Create an error instance from v:exception which is a string
	    " repl of an error instance and echo with ErrorMsg highlight.
	    call s:Error.catch().echo()
	  endtry
	endfunction
	" [plugin] This is an exception message
	" ... throwpoint ...

	function! s:with_promise() abort
	  function! s:executor(resolve, reject) abort
	    throw 'This is an exception message'
	  endfunction

	  let Promise = vital#vital#import('Async.Promise')
	  call Promise.new(funcref('s:executor'))
	        \.catch({ e -> s:Error.from(e).echo() })
	endfunction
	" [plugin] This is an exception message
	" ... throwpoint ...
<


=============================================================================
VARIABLE 				*Vital.Error-variable*

						*Vital.Error.plugin_name*
.plugin_name
	A plugin name detected from a script path.
	This value is used in the folllowings
	|Vital.Error-instance.echo|
	|Vital.Error-instance.echomsg||


=============================================================================
FUNCTION 				*Vital.Error-function*

						*Vital.Error.new()*
.new({exception} [, {throwpoint}])
	Create a new error instance with given {exception} and {throwpoint}.
	A default value of {throwpoint} is an empty string.

						*Vital.Error.from()*
.from({any})
	Create an error instance from {any}. 

	When {any} is a |Dictionary| and it has "exception" key, it assume
	the {any} is an error like object and create an error instance from
	that. If the dictionary has "throwpoint", it is used as well.

	When {any} is a |String|, it call |Vital.Error.catch()| internally to
	create an error instance.

	Otherwise a result of |string()| is used as an exception message.
>
	" From an error like object
	let e = s:Error.from({ 'exception': 'This is error' })
	let e = s:Error.from({
	      \ 'exception': 'This is error',
	      \ 'throwpoint': 'This is a throw point'
	      \})

	" From a string repl of an error instance
	let e = s:Error.from('{"exception": "...", "throwpoint": "..."}')

	" From an error message
	let e = s:Error.from('This is an error message')

	" From List/Dict
	let e = s:Error.from(['foo'])
	let e = s:Error.from({'foo': 'bar'})
<
						*Vital.Error.catch()*
.catch([{exception}])
	Create a new error instance from {exception} and |v:throwpoint|.
	A default value of {exception} is |v:exception|.

	When {exception} is a string repl of an error instance, it ignores
	|v:throwpoint| and parses {exception} to create an instance.

	It throws an exception when no {exception} is given and |v:exception|
	is not available.
>
	try
	  " Do what ever...
	catch
	  let e = s:Error.catch()
	endtry
<

=============================================================================
INSTANCE 				*Vital.Error-instance*

					*Vital.Error-instance.echo()*
.echo({hl})
	Echo an exception and a throwpoint of the error instance with given
	{hl}. If no {hl} is given, |hl-ErrorMsg|is used.

					*Vital.Error-instance.echomsg()*
.echomsg({hl})
	Echo an exception and a throwpoint of the error instance with given
	{hl} and write the messages into |message-history|.
	If no {hl} is given, |hl-ErrorMsg|is used.

					*Vital.Error-instance.throw()*
.throw()
	Throw a string repl of the error instance which is catchable with
	|Vital.Error.catch()| method.

	Internally, the string repl of the error is a JSON string like
>
	let string_repl = json_encode({
	      \ 'exception': 'Error message',
	      \ 'throwpoint': 'Throwpoint',
	      \})
<


==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
