*Vital.Async.Process.txt*	System.Job wrapper which use Async.Observable

Author:  Alisue <lambdalisue@hashnote.net>
License: MIT license
Support: Vim 8.0.0107 and above
Support: Neovim 0.2.0 and above

=============================================================================
CONTENTS				*Vital.Async.Process-contents*

Introduction			|Vital.Async.Process-introduction|
Usage				|Vital.Async.Process-usage|
Functions			|Vital.Async.Process-functions|
Emissions			|Vital.Async.Process-emissions|
Operators			|Vital.Async.Process-operators|


=============================================================================
INTRODUCTION				*Vital.Async.Process-introduction*

*Vital.Async.Process* is a module to provide a way to execute an external
program with a |Vital.Async.Observable| interface.

It internally uses |Vital.System.Job| to execute a program so it works both
on Vim and Neovim.

While it follows the Observable interface, the power of |Vital.Rx| module can
be applied to manipulate the process.


=============================================================================
USAGE					*Vital.Async.Process-usage*

Create a Process instance by |Vital.Async.Process.new()| function by appling
command arguments like:
>
	let Process = vital#{plugin}#import('Async.Process')
	let p = Process.new(['echo', 'Hello'])
<
Then subscribe the instance to start the program
>
	call p.subscribe({ v -> execute('echo v', '') })
	" { 'pid': xxxxx }
	" { 'stdout': ['Hello'] }
<
While the Process instance is an Observable, users can use operators to
substitute the stream.
>
	let Operators = vital#{plugin}#import('Rx.Operators')
	let p = p.pipe(
	      \ Operators.filter({ -> has_key(v:val, 'stdout') }),
	      \ Operators.map({ -> v:val.stdout })
	      \)
	call p.subscribe({ v -> execute('echo v', '') })
	" Hello
<
Note that the emissions of stdout or stderr are as-is from System.Job, so
the data is received as a newline (\n) separated list like:

	1. ["Hello", "Good", "Bye", ""]
	2. ["Hello", ""], ["Good", ""], and ["Bye", ""]
	3. ["Hello", "Go"], ["od", "Bye"], and ["", ""]

To normalize data like above, Process module provides original operators:
>
	" Example stream:
	"   next -> {'pid': 100}
	"   next -> {'stdout': ['Hello', 'World', 'Go']}
	"   next -> {'stderr': ['FOOBAR']}
	"   next -> {'stdout': ['od', 'Bye']}
	"   next -> {'stderr': ['FOOBAR']}
	"   next -> {'stdout': ['', '']}
	"   complete

	" Focus to the stdout emissions
	call p.pipe(
	      \ Process.operators.focus('stdout'),
	      \).subscribe({ v -> execute('echo v', '') })
	" {'stdout': ['Hello', 'World', 'Go']}
	" {'stdout': ['od', 'Bye']}
	" {'stdout': ['', '']}


	" Focus and squash stdout emissions to emit complete line blocks
	call p.pipe(
	      \ Process.operators.focus('stdout'),
	      \ Process.operators.squash('stdout'),
	      \).subscribe({ v -> execute('echo v', '') })
	" {'stdout': ['Hello', 'World']}
	" {'stdout': ['Good']}
	" {'stdout': ['Bye']}

	" Focus, squash, and stretch stdout emissions to emit complete lines
	call p.pipe(
	      \ Process.operators.focus('stdout'),
	      \ Process.operators.squash('stdout'),
	      \ Process.operators.stretch('stdout'),
	      \).subscribe({ v -> execute('echo v', '') })
	" {'stdout': 'Hello'}
	" {'stdout': 'World'}
	" {'stdout': 'Good'}
	" {'stdout': 'Bye'}

	" Emits piles of complete lines of stdout
	call p.pipe(Process.operators.pile('stdout'))
	" ['Hello', 'World']
	" ['Good']
	" ['Bye']

	" Emits complete lines of stdout
	call p.pipe(Process.operators.line('stdout'))
	" 'Hello'
	" 'World'
	" 'Good'
	" 'Bye'
<


=============================================================================
FUNCTIONS				*Vital.Async.Process-functions*

.new({args}[, {options}])		*Vital.Async.Process.new()*

	Create a new Process instance (Observable) which will execute a
	command {args} when subscribed.

	The following arguments are available in {options}.

	"cwd"		Force to execute a process in a given directory when
			subscribed. Otherwise the process is executed under
			a current directory on subscribing.
	"raw"		TRUE to use raw stream instead of \r removed stream.
	"stdin"		An Observable like (Observable, Promise, List) which
			is used to send messages into stdin of the process.

	Note that a command {args} will be executed once the process is
	subscribed.

	It throws an exception when called from non supported Vim/Neovim.


=============================================================================
EMISSIONS				*Vital.Async.Process-emissions*

Once a Process instance is subscribed, the observer/subscriber will receive
the following emissions

next:pid			*Vital.Async.Process-emissions.next-pid*

	Received as a next event with {'pid': ...} which indicate the PID of
	the process.
	It will be emitted immediately after subscribing.

next:stdout			*Vital.Async.Process-emissions.next-stdout*
next:stderr			*Vital.Async.Process-emissions.next-stderr*

	Received as a next event with {'stdout': [...]} or {'stderr': [...]}
	which indicate the stdout/stderr data received.

	Note that the data is a newline (\n) separated list so users need
	to normalize the data to make complete data.

	See also:
	|Vital.Async.Process.operators.squash()|
	|Vital.Async.Process.operators.stretch()|

error				*Vital.Async.Process-emissions.error*

	Receveid as an error event with exitval which indicate that the
	process with some exception.

complete			*Vital.Async.Process-emissions.complete*

	Receveid as a complete event which indicate that the process exit
	successfully.


=============================================================================
OPERATORS				*Vital.Async.Process-operators*

Process module provides some original operators under .operators attribute
to handle stdout/stderr.

.focus({key})			*Vital.Async.Process.operators.focus()*

	Focus a given {key} of emissions in next events and emits emission
	object which has only a given {key}.
	In other words, it eliminate emissions which does not have the given
	{key} and emit new emissions without non specified attributes.

	It is similar to "pluck" operator in Rx and the differences are

	1. focus does not support a nested property
	2. focus does not flatten a property

.squash({key})			*Vital.Async.Process.operators.squash()*

	Squash data of a given {key} of emissions in next events and emits
	emission object with line blocks (list).

	Note that it pass-through emissions which does not have a given {key}
	attribute. Use focus() operator to filter emissions.


.stretch({key})			*Vital.Async.Process.operators.stretch()*

	Stretch data of a given {key} of emissions in next events and emits
	emission object with a single line.

	Note that it pass-through emissions which does not have a given {key}
	attribute. Use focus() operator to filter emissions.

	Note that stretching the original stdout/stderr data does not make
	sense. Use squash() operator to make correct line blocks first.

.pile({key})			*Vital.Async.Process.operators.pile()*

	Emits piles (line blocks) of each complete lines of a given {key} of
	emissions in next events.

	It is a combination operator equivalent to squash/pluck.

.line({key})			*Vital.Async.Process.operators.line()*

	Emits complete lines of a given {key} of emissions in next events.

	It is a combination operator equivalent to squash/stretch/pluck.


=============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
