*Vital/App/Flag.txt*			Simple command argument manager.

Author:  Alisue <lambdalisue@hashnote.net>
License: MIT license


=============================================================================
CONTENTS				*Vital.App.Flag-contents*

Introduction			|Vital.App.Flag-introduction|
Usage				|Vital.App.Flag-usage|
Functions			|Vital.App.Flag-functions|


=============================================================================
INTRODUCTION				*Vital.App.Flag-introduction*

|Vital.App.Flag| is simple command argument manager which supports only the
following two forms.

	-flag		Boolean
	-flag=value	String value

Not like |Vital.OptionParser| or Vital.ArgumentParser, this module limits form
styles to make internal code simple and stable.

See also:
https://github.com/lambdalisue/vital-ArgumentParser


=============================================================================
USAGE						*Vital.App.Flag-usage*

Use |Vital.App.Flag.split()| to split cmdline string like:
>
	let s:Flag = vital#vital#import('App.Flag')
	let args = s:Flag.split('command -foo -bar -hoge=hoge file1 file2')
	echo args
	" -> ['command', '-foo', '-bar', '-hoge=hoge', 'file1', 'file2']
<
Then use |Vital.App.Flag.flag()| and |Vital.App.Flag.value()| to read flags
like:
>
	echo s:Flag.flag(args, 'foo')
	" -> 1
	call s:Flag.flag(args, 'foo-missing')
	" -> 0
	call s:Flag.value(args, 'hoge')
	" -> "hoge"
	call s:Flag.value(args, 'hoge-missing')
	" -> v:null
<
Or use |Vital.App.Flag.parse()| to parse all flags like:
>
	let [options, remains] = s:Flag.parse(args)
	echo options
	" -> {
	"  'foo': 1,
	"  'bar': 1,
	"  'hoge': 'hoge',
	"}
	" echo remains
	" -> ['command', 'file1', 'file2']
<


=============================================================================
FUNCTIONS					*Vital.App.Flag-functions*

					*Vital.App.Flag.split()*
.split({cmdline})
	Split {cmdline} and return string list.
	It respects escaped space and single/double quoted string.
>
	echo Flag.split('foo')
	" -> ['foo']
	echo Flag.split('foo bar')
	" -> ['foo', 'bar']
	echo Flag.split('"foo foo" "bar bar"')
	" -> ['foo foo', 'bar bar']
	echo Flag.split('foo "bar bar" hoge')
	" -> ['foo', 'bar bar', 'hoge']
	echo Flag.split('--foo="foo" -b"bar"')
	" -> ['--foo=foo', '-bbar']
	echo Flag.split('foo\ bar\ hoge')
	" -> ['foo\ bar\ hoge']
<
					*Vital.App.Flag.flag()*
.flag({args}, {name})
	Return TRUE if {name} option (-{name}) exists in {args}.
>
	echo Flag.flag(['-foo'], 'foo')
	" -> 1
	echo Flag.flag(['-foo-bar'], 'foo')
	" -> 0
<
					*Vital.App.Flag.value()*
.value({args}, {name}[, {default}])
	Return {value} of {name} option (-{name}={value}) exists in {args}.
	It returns {default} or |v:null| if no {name} option exists.
>
	echo Flag.value(['-foo=FOO'], 'foo')
	" -> 'FOO'
	echo Flag.value(['-foo-bar=FOO'], 'foo')
	" -> v:null
	echo Flag.value(['-foo-bar=FOO'], 'foo', 'DEFAULT')
	" -> 'DEFAULT'
<
					*Vital.App.Flag.parse()*
.parse({args})
	Parse {args} and return [{options}, {remains}].
	All flags found in {args} exists in {options} object and all non flag
	values (positional arguments) exists in {remains} list.


=============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
