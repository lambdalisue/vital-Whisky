Describe Async.Promise.Deferred
  Before all
    let Promise = vital#vital#import('Async.Promise')
    " States of promise
    let PENDING = 0
    let FULFILLED = 1
    let REJECTED = 2
  End

  Before
    let Deferred = vital#vital#import('Async.Promise.Deferred')
  End

  Describe .new()
    It returns a deferred instance
      let d = Deferred.new()
      Assert True(Promise.is_promise(d))
      Assert KeyExists(d, 'resolve')
      Assert KeyExists(d, 'reject')
    End

    Context instance
      Before
        let d = Deferred.new()
      End

      Describe .resolve()
        It resolves the internal promise
          Assert Equals(d._state, PENDING)
          call d.resolve()
          Assert Equals(d._state, FULFILLED)
        End
      End

      Describe .reject()
        It rejects the internal promise
          Assert Equals(d._state, PENDING)
          call d.reject()
          Assert Equals(d._state, REJECTED)
        End
      End
    End
  End
End
