Describe Async.Lambda
  Before
    let Lambda = vital#vital#import('Async.Lambda')
    let Promise = vital#vital#import('Async.Promise')

    let Lambda.chunk_size = 2
  End
  Describe .map()
    It returns a {fn} applied copies of {list}
      let list = [5, 4, 3, 2, 1]

      " The first argument is value
      let [copy, e] = Promise.wait(Lambda.map(list, { v -> v + 1 }), 100)
      Assert Equals(e, v:null)
      Assert Equals(list, [5, 4, 3, 2, 1])
      Assert Equals(copy, [6, 5, 4, 3, 2])

      " The second argument is index
      let [copy, e] = Promise.wait(Lambda.map(list, { _, k -> k + 1 }))
      Assert Equals(e, v:null)
      Assert Equals(list, [5, 4, 3, 2, 1])
      Assert Equals(copy, [1, 2, 3, 4, 5])
    End
  End

  Describe .filter()
    It returns copies of {list} filtered by {fn}
      let list = [5, 4, 3, 2, 1]

      " The first argument is value
      let [copy, e] = Promise.wait(Lambda.filter(list, { v -> v % 2 is# 0 }))
      Assert Equals(e, v:null)
      Assert Equals(list, [5, 4, 3, 2, 1])
      Assert Equals(copy, [4, 2])

      " The second argument is index
      let [copy, e] = Promise.wait(Lambda.filter(list, { _, k -> k % 2 is# 0 }))
      Assert Equals(e, v:null)
      Assert Equals(list, [5, 4, 3, 2, 1])
      Assert Equals(copy, [5, 3, 1])
    End
  End

  Describe .reduce()
    It returns a reduced value for {fn} applied copies of {list}
      let list = [5, 4, 3, 2, 1]

      " The second argument is value
      let [value, e] = Promise.wait(Lambda.reduce(list, { a, v -> a + v }, 0), 100)
      Assert Equals(e, v:null)
      Assert Equals(list, [5, 4, 3, 2, 1])
      Assert Equals(value, 15)

      " The thrid argument is index
      let [value, e] = Promise.wait(Lambda.reduce(list, { a, _, k -> a + k }, 0), 100)
      Assert Equals(e, v:null)
      Assert Equals(list, [5, 4, 3, 2, 1])
      Assert Equals(value, 10)
    End
  End

  Describe .map_f()
    It returns a function which execute map on the list
      let list = [5, 4, 3, 2, 1]

      " The first argument is value
      let l:F = Lambda.map_f({ v -> v + 1 })
      let [copy, e] = Promise.wait(F(list), 100)
      Assert Equals(e, v:null)
      Assert Equals(list, [5, 4, 3, 2, 1])
      Assert Equals(copy, [6, 5, 4, 3, 2])

      " The second argument is index
      let l:F = Lambda.map_f({ _, k -> k + 1 })
      let [copy, e] = Promise.wait(F(list), 100)
      Assert Equals(e, v:null)
      Assert Equals(list, [5, 4, 3, 2, 1])
      Assert Equals(copy, [1, 2, 3, 4, 5])
    End
  End

  Describe .filter_f()
    It returns a function which execute filter on the list
      let list = [5, 4, 3, 2, 1]

      " The first argument is value
      let l:F = Lambda.filter_f({ v -> v % 2 is# 0 })
      let [copy, e] = Promise.wait(F(list), 100)
      Assert Equals(e, v:null)
      Assert Equals(list, [5, 4, 3, 2, 1])
      Assert Equals(copy, [4, 2])

      " The second argument is index
      let l:F = Lambda.filter_f({ _, k -> k % 2 is# 0 })
      let [copy, e] = Promise.wait(F(list), 100)
      Assert Equals(e, v:null)
      Assert Equals(list, [5, 4, 3, 2, 1])
      Assert Equals(copy, [5, 3, 1])
    End
  End

  Describe .reduce()
    It returns a function which execute reduce on the list
      let list = [5, 4, 3, 2, 1]

      " The second argument is value
      let l:F = Lambda.reduce_f({ a, v -> a + v }, 0)
      let [value, e] = Promise.wait(F(list), 100)
      Assert Equals(e, v:null)
      Assert Equals(list, [5, 4, 3, 2, 1])
      Assert Equals(value, 15)

      " The thrid argument is index
      let l:F = Lambda.reduce_f({ a, _, k -> a + k }, 0)
      let [value, e] = Promise.wait(F(list), 100)
      Assert Equals(e, v:null)
      Assert Equals(list, [5, 4, 3, 2, 1])
      Assert Equals(value, 10)
    End
  End
End
