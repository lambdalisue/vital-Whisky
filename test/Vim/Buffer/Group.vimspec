Describe Vim.Buffer.Group
  After all
    silent %bwipeout!
  End

  Before
    let Group = vital#vital#import('Vim.Buffer.Group')
    silent %bwipeout!
  End

  Describe .new()
    It returns a new unique group instance
      let group1 = Group.new()
      let group2 = Group.new()
      Assert NotSame(group1, group2)
    End
  End

  Describe group instance
    Before
      let group = Group.new()
    End

    Describe the behavior
      It close all members except buffers added with {'keep': 1}
        new foo1
        call group.add()
        new foo2
        call group.add({'keep': 1})
        new foo3
        call group.add()
        new foo4
        call group.add()
        new foo5
        call group.add({'keep': 1})
        Assert Equals(winnr('$'), 5 + 1)
        close
        Assert Equals(winnr('$'), 1 + 1)
      End

      It does not close buffers when no member buffer has closed
        new foo1
        call group.add()
        new foo2
        call group.add({'keep': 1})
        new foo3
        call group.add()
        new foo4
        call group.add()
        new foo5
        call group.add({'keep': 1})
        new foo6
        Assert Equals(winnr('$'), 6 + 1)
        close
        Assert Equals(winnr('$'), 5 + 1)
      End

      It does not close buffers when tabpage has changed
        new foo1
        call group.add()
        new foo2
        call group.add({'keep': 1})
        new foo3
        call group.add()
        new foo4
        call group.add()
        new foo5
        call group.add({'keep': 1})
        Assert Equals(winnr('$'), 5 + 1)
        tabnew
        Assert Equals(winnr('$'), 1)
        tabprevious
        Assert Equals(winnr('$'), 5 + 1)
      End
    End
  End
End
