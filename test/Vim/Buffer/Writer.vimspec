scriptencoding utf8

Describe Vim.Buffer.Writer
  After all
    silent %bwipeout!
  End

  Before all
    let Path = vital#vital#import('System.Filepath')
    let encodings = {}
    let encoding_dir = 'test/_testdata/Vim/Buffer/Writer'
    for filename in glob(Path.realpath(encoding_dir . '/*-encoding.txt'), 1, 1)
      let name = matchstr(fnamemodify(filename, ':t'), '.*\ze-encoding.txt')
      let encodings[name] = {
            \ 'name': name,
            \ 'filename': filename,
            \}
    endfor
  End

  Before
    let Writer = vital#vital#import('Vim.Buffer.Writer')
    silent %bwipeout!
  End

  Describe .replace({expr}, {start}, {end}, {replacement})
    Context Buffer which is shown on the current window
      Before
        edit foo2
        vnew foo1
        call setline('$', ['Hello', 'Darkness', 'Friend'])
        let bufnr = bufnr('foo1')
        Assert Equals(bufnr('%'), bufnr)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Darkness',
              \ 'Friend',
              \])
      End

      It returns 1 and do not modify content if {start} is out-of-range
        let failed = Writer.replace(bufnr, 10, 0, ['Foo', 'Bar'])
        Assert Equals(failed, 1)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Darkness',
              \ 'Friend',
              \])

        let failed = Writer.replace(bufnr, -10, 0, ['Foo', 'Bar'])
        Assert Equals(failed, 1)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Darkness',
              \ 'Friend',
              \])
      End

      It returns 1 and do not modify content if {end} is out-of-range
        let failed = Writer.replace(bufnr, 0, 10, ['Foo', 'Bar'])
        Assert Equals(failed, 1)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Darkness',
              \ 'Friend',
              \])

        let failed = Writer.replace(bufnr, 0, -10, ['Foo', 'Bar'])
        Assert Equals(failed, 1)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Darkness',
              \ 'Friend',
              \])
      End

      It inserts lines at a given index
        call Writer.replace(bufnr, 2, 2, ['My', 'Old'])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Darkness',
              \ 'My',
              \ 'Old',
              \ 'Friend',
              \])
      End

      It inserts lines at a given negative index
        call Writer.replace(bufnr, -1, -1, ['My', 'Old'])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Darkness',
              \ 'Friend',
              \ 'My',
              \ 'Old',
              \])
      End

      It replaces lines between a given range
        call Writer.replace(bufnr, 1, 2, ['My', 'World'])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'My',
              \ 'World',
              \ 'Friend',
              \])
      End

      It replaces lines between a given negative range
        call Writer.replace(bufnr, -2, -1, ['My', 'World'])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Darkness',
              \ 'My',
              \ 'World',
              \])
      End

      It removes lines between a given range when {replacement} is an empty list
        call Writer.replace(bufnr, 1, 2, [])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Friend',
              \])
      End

      It removes lines between a given negative range when {replacement} is an empty list
        call Writer.replace(bufnr, -2, -1, [])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Darkness',
              \])
      End

      It removes lines between a given positive/negative range when {replacement} is an empty list
        call Writer.replace(bufnr, 0, -1, [])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ '',
              \])
      End

      Context a current buffer
        It should NOT change a current buffer (insert)
          let expect = bufnr('%')
          call Writer.replace(bufnr, 2, 2, ['My', 'Old'])
          Assert Equals(bufnr('%'), expect)
        End

        It should NOT change a current buffer (insert, negative)
          let expect = bufnr('%')
          call Writer.replace(bufnr, -1, -1, ['My', 'Old'])
          Assert Equals(bufnr('%'), expect)
        End

        It should NOT change a current buffer (replace)
          let expect = bufnr('%')
          call Writer.replace(bufnr, 1, 2, ['My', 'World'])
          Assert Equals(bufnr('%'), expect)
        End

        It should NOT change a current buffer (replace, negative)
          let expect = bufnr('%')
          call Writer.replace(bufnr, -2, -1, ['My', 'World'])
          Assert Equals(bufnr('%'), expect)
        End

        It should NOT change a current buffer (remove)
          let expect = bufnr('%')
          call Writer.replace(bufnr, 1, 2, [])
          Assert Equals(bufnr('%'), expect)
        End

        It should NOT change a current buffer (remove, negative)
          let expect = bufnr('%')
          call Writer.replace(bufnr, -2, -1, [])
          Assert Equals(bufnr('%'), expect)
        End

        It should NOT change a current buffer (remove, positive/negative)
          let expect = bufnr('%')
          call Writer.replace(bufnr, 0, -1, [])
          Assert Equals(bufnr('%'), expect)
        End
      End

      Context an alternate-file
        It should NOT change an alternate-file (insert)
          let expect = bufnr('#')
          call Writer.replace(bufnr, 2, 2, ['My', 'Old'])
          Assert Equals(bufnr('#'), expect)
        End

        It should NOT change an alternate-file (insert, negative)
          let expect = bufnr('#')
          call Writer.replace(bufnr, -1, -1, ['My', 'Old'])
          Assert Equals(bufnr('#'), expect)
        End

        It should NOT change an alternate-file (replace)
          let expect = bufnr('#')
          call Writer.replace(bufnr, 1, 2, ['My', 'World'])
          Assert Equals(bufnr('#'), expect)
        End

        It should NOT change an alternate-file (replace, negative)
          let expect = bufnr('#')
          call Writer.replace(bufnr, -2, -1, ['My', 'World'])
          Assert Equals(bufnr('#'), expect)
        End

        It should NOT change an alternate-file (remove)
          let expect = bufnr('#')
          call Writer.replace(bufnr, 1, 2, [])
          Assert Equals(bufnr('#'), expect)
        End

        It should NOT change an alternate-file (remove, negative)
          let expect = bufnr('#')
          call Writer.replace(bufnr, -2, -1, [])
          Assert Equals(bufnr('#'), expect)
        End

        It should NOT change an alternate-file (remove, positive/negative)
          let expect = bufnr('#')
          call Writer.replace(bufnr, 0, -1, [])
          Assert Equals(bufnr('#'), expect)
        End
      End

      Context a cursor position
        It should NOT change a cursor position (insert)
          let expect = getcurpos()
          call Writer.replace(bufnr, 2, 2, ['My', 'Old'])
          Assert Equals(getcurpos(), expect)
        End

        It should NOT change a cursor position (insert, negative)
          let expect = getcurpos()
          call Writer.replace(bufnr, -1, -1, ['My', 'Old'])
          Assert Equals(getcurpos(), expect)
        End

        It should NOT change a cursor position (replace)
          let expect = getcurpos()
          call Writer.replace(bufnr, 1, 2, ['My', 'World'])
          Assert Equals(getcurpos(), expect)
        End

        It should NOT change a cursor position (replace, negative)
          let expect = getcurpos()
          call Writer.replace(bufnr, -2, -1, ['My', 'World'])
          Assert Equals(getcurpos(), expect)
        End

        It should NOT change a cursor position (remove)
          let expect = getcurpos()
          call Writer.replace(bufnr, 1, 2, [])
          Assert Equals(getcurpos(), expect)
        End

        It should NOT change a cursor position (remove, negative)
          let expect = getcurpos()
          call Writer.replace(bufnr, -2, -1, [])
          Assert Equals(getcurpos(), expect)
        End

        It should NOT change a cursor position (remove, positive/negative)
          let expect = getcurpos()
          call Writer.replace(bufnr, 0, -1, [])
          Assert Equals(getcurpos(), expect)
        End
      End

      Context a jumplist
        It should NOT change a jumplist (insert)
          let expect = split(execute('jumps'), '\r\?\n')
          call Writer.replace(bufnr, 2, 2, ['My', 'Old'])
          Assert Equals(split(execute('jumps'), '\r\?\n'), expect)
        End

        It should NOT change a jumplist (insert, negative)
          let expect = split(execute('jumps'), '\r\?\n')
          call Writer.replace(bufnr, -1, -1, ['My', 'Old'])
          Assert Equals(split(execute('jumps'), '\r\?\n'), expect)
        End

        It should NOT change a jumplist (replace)
          let expect = split(execute('jumps'), '\r\?\n')
          call Writer.replace(bufnr, 1, 2, ['My', 'World'])
          Assert Equals(split(execute('jumps'), '\r\?\n'), expect)
        End

        It should NOT change a jumplist (replace, negative)
          let expect = split(execute('jumps'), '\r\?\n')
          call Writer.replace(bufnr, -2, -1, ['My', 'World'])
          Assert Equals(split(execute('jumps'), '\r\?\n'), expect)
        End

        It should NOT change a jumplist (replace, positive/negative)
          let expect = split(execute('jumps'), '\r\?\n')
          call Writer.replace(bufnr, 0, -1, ['My', 'World'])
          Assert Equals(split(execute('jumps'), '\r\?\n'), expect)
        End

        It should NOT change a jumplist (remove)
          let expect = split(execute('jumps'), '\r\?\n')
          call Writer.replace(bufnr, 1, 2, [])
          Assert Equals(split(execute('jumps'), '\r\?\n'), expect)
        End

        It should NOT change a jumplist (remove, negative)
          let expect = split(execute('jumps'), '\r\?\n')
          call Writer.replace(bufnr, -2, -1, [])
          Assert Equals(split(execute('jumps'), '\r\?\n'), expect)
        End

        It should NOT change a jumplist (remove, positive/negative)
          let expect = split(execute('jumps'), '\r\?\n')
          call Writer.replace(bufnr, 0, -1, [])
          Assert Equals(split(execute('jumps'), '\r\?\n'), expect)
        End
      End
    End

    Context Buffer which is shown on the other window
      Before
        edit foo1
        call setline('$', ['Hello', 'Darkness', 'Friend'])
        vnew foo2
        let bufnr = bufnr('foo1')
        Assert NotEquals(bufnr('%'), bufnr)
        Assert NotEquals(bufwinnr(bufnr), -1)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Darkness',
              \ 'Friend',
              \])
      End

      It returns 1 and do not modify content if {start} is out-of-range
        let failed = Writer.replace(bufnr, 10, 0, ['Foo', 'Bar'])
        Assert Equals(failed, 1)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Darkness',
              \ 'Friend',
              \])

        let failed = Writer.replace(bufnr, -10, 0, ['Foo', 'Bar'])
        Assert Equals(failed, 1)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Darkness',
              \ 'Friend',
              \])
      End

      It returns 1 and do not modify content if {end} is out-of-range
        let failed = Writer.replace(bufnr, 0, 10, ['Foo', 'Bar'])
        Assert Equals(failed, 1)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Darkness',
              \ 'Friend',
              \])

        let failed = Writer.replace(bufnr, 0, -10, ['Foo', 'Bar'])
        Assert Equals(failed, 1)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Darkness',
              \ 'Friend',
              \])
      End

      It inserts lines at a given index
        call Writer.replace(bufnr, 2, 2, ['My', 'Old'])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Darkness',
              \ 'My',
              \ 'Old',
              \ 'Friend',
              \])
      End

      It inserts lines at a given negative index
        call Writer.replace(bufnr, -1, -1, ['My', 'Old'])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Darkness',
              \ 'Friend',
              \ 'My',
              \ 'Old',
              \])
      End

      It replaces lines between a given range
        call Writer.replace(bufnr, 1, 2, ['My', 'World'])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'My',
              \ 'World',
              \ 'Friend',
              \])
      End

      It replaces lines between a given negative range
        call Writer.replace(bufnr, -2, -1, ['My', 'World'])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Darkness',
              \ 'My',
              \ 'World',
              \])
      End

      It removes lines between a given range when {replacement} is an empty list
        call Writer.replace(bufnr, 1, 2, [])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Friend',
              \])
      End

      It removes lines between a given negative range when {replacement} is an empty list
        call Writer.replace(bufnr, -2, -1, [])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Darkness',
              \])

        call Writer.replace(bufnr, 0, -1, [])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ '',
              \])
      End

      It removes lines between a given positive/negative range when {replacement} is an empty list
        call Writer.replace(bufnr, 0, -1, [])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ '',
              \])
      End

      Context a current buffer
        It should NOT change a current buffer (insert)
          let expect = bufnr('%')
          call Writer.replace(bufnr, 2, 2, ['My', 'Old'])
          Assert Equals(bufnr('%'), expect)
        End

        It should NOT change a current buffer (insert, negative)
          let expect = bufnr('%')
          call Writer.replace(bufnr, -1, -1, ['My', 'Old'])
          Assert Equals(bufnr('%'), expect)
        End

        It should NOT change a current buffer (replace)
          let expect = bufnr('%')
          call Writer.replace(bufnr, 1, 2, ['My', 'World'])
          Assert Equals(bufnr('%'), expect)
        End

        It should NOT change a current buffer (replace, negative)
          let expect = bufnr('%')
          call Writer.replace(bufnr, -2, -1, ['My', 'World'])
          Assert Equals(bufnr('%'), expect)
        End

        It should NOT change a current buffer (remove)
          let expect = bufnr('%')
          call Writer.replace(bufnr, 1, 2, [])
          Assert Equals(bufnr('%'), expect)
        End

        It should NOT change a current buffer (remove, negative)
          let expect = bufnr('%')
          call Writer.replace(bufnr, -2, -1, [])
          Assert Equals(bufnr('%'), expect)
        End

        It should NOT change a current buffer (remove, positive/negative)
          let expect = bufnr('%')
          call Writer.replace(bufnr, 0, -1, [])
          Assert Equals(bufnr('%'), expect)
        End
      End

      Context an alternate-file
        It should NOT change an alternate-file (insert)
          let expect = bufnr('#')
          call Writer.replace(bufnr, 2, 2, ['My', 'Old'])
          Assert Equals(bufnr('#'), expect)
        End

        It should NOT change an alternate-file (insert, negative)
          let expect = bufnr('#')
          call Writer.replace(bufnr, -1, -1, ['My', 'Old'])
          Assert Equals(bufnr('#'), expect)
        End

        It should NOT change an alternate-file (replace)
          let expect = bufnr('#')
          call Writer.replace(bufnr, 1, 2, ['My', 'World'])
          Assert Equals(bufnr('#'), expect)
        End

        It should NOT change an alternate-file (replace, negative)
          let expect = bufnr('#')
          call Writer.replace(bufnr, -2, -1, ['My', 'World'])
          Assert Equals(bufnr('#'), expect)
        End

        It should NOT change an alternate-file (remove)
          let expect = bufnr('#')
          call Writer.replace(bufnr, 1, 2, [])
          Assert Equals(bufnr('#'), expect)
        End

        It should NOT change an alternate-file (remove, negative)
          let expect = bufnr('#')
          call Writer.replace(bufnr, -2, -1, [])
          Assert Equals(bufnr('#'), expect)
        End

        It should NOT change an alternate-file (remove, positive/negative)
          let expect = bufnr('#')
          call Writer.replace(bufnr, 0, -1, [])
          Assert Equals(bufnr('#'), expect)
        End
      End

      Context a cursor position
        It should NOT change a cursor position (insert)
          let expect = getcurpos()
          call Writer.replace(bufnr, 2, 2, ['My', 'Old'])
          Assert Equals(getcurpos(), expect)
        End

        It should NOT change a cursor position (insert, negative)
          let expect = getcurpos()
          call Writer.replace(bufnr, -1, -1, ['My', 'Old'])
          Assert Equals(getcurpos(), expect)
        End

        It should NOT change a cursor position (replace)
          let expect = getcurpos()
          call Writer.replace(bufnr, 1, 2, ['My', 'World'])
          Assert Equals(getcurpos(), expect)
        End

        It should NOT change a cursor position (replace, negative)
          let expect = getcurpos()
          call Writer.replace(bufnr, -2, -1, ['My', 'World'])
          Assert Equals(getcurpos(), expect)
        End

        It should NOT change a cursor position (remove)
          let expect = getcurpos()
          call Writer.replace(bufnr, 1, 2, [])
          Assert Equals(getcurpos(), expect)
        End

        It should NOT change a cursor position (remove, negative)
          let expect = getcurpos()
          call Writer.replace(bufnr, -2, -1, [])
          Assert Equals(getcurpos(), expect)
        End

        It should NOT change a cursor position (remove, positive/negative)
          let expect = getcurpos()
          call Writer.replace(bufnr, 0, -1, [])
          Assert Equals(getcurpos(), expect)
        End
      End

      Context a jumplist
        It should NOT change a jumplist (insert)
          let expect = split(execute('jumps'), '\r\?\n')
          call Writer.replace(bufnr, 2, 2, ['My', 'Old'])
          Assert Equals(split(execute('jumps'), '\r\?\n'), expect)
        End

        It should NOT change a jumplist (insert, negative)
          let expect = split(execute('jumps'), '\r\?\n')
          call Writer.replace(bufnr, -1, -1, ['My', 'Old'])
          Assert Equals(split(execute('jumps'), '\r\?\n'), expect)
        End

        It should NOT change a jumplist (replace)
          let expect = split(execute('jumps'), '\r\?\n')
          call Writer.replace(bufnr, 1, 2, ['My', 'World'])
          Assert Equals(split(execute('jumps'), '\r\?\n'), expect)
        End

        It should NOT change a jumplist (replace, negative)
          let expect = split(execute('jumps'), '\r\?\n')
          call Writer.replace(bufnr, -2, -1, ['My', 'World'])
          Assert Equals(split(execute('jumps'), '\r\?\n'), expect)
        End

        It should NOT change a jumplist (replace, positive/negative)
          let expect = split(execute('jumps'), '\r\?\n')
          call Writer.replace(bufnr, 0, -1, ['My', 'World'])
          Assert Equals(split(execute('jumps'), '\r\?\n'), expect)
        End

        It should NOT change a jumplist (remove)
          let expect = split(execute('jumps'), '\r\?\n')
          call Writer.replace(bufnr, 1, 2, [])
          Assert Equals(split(execute('jumps'), '\r\?\n'), expect)
        End

        It should NOT change a jumplist (remove, negative)
          let expect = split(execute('jumps'), '\r\?\n')
          call Writer.replace(bufnr, -2, -1, [])
          Assert Equals(split(execute('jumps'), '\r\?\n'), expect)
        End

        It should NOT change a jumplist (remove, positive/negative)
          let expect = split(execute('jumps'), '\r\?\n')
          call Writer.replace(bufnr, 0, -1, [])
          Assert Equals(split(execute('jumps'), '\r\?\n'), expect)
        End
      End
    End

    Context Buffer which is hidden (hidden)
      Before
        edit foo1 | setlocal bufhidden=hide
        call setline('$', ['Hello', 'Darkness', 'Friend'])
        edit foo2
        let bufnr = bufnr('foo1')
        Assert NotEquals(bufnr('%'), bufnr)
        Assert Equals(bufwinnr(bufnr), -1)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Darkness',
              \ 'Friend',
              \])
      End

      It returns 1 and do not modify content if {start} is out-of-range
        let failed = Writer.replace(bufnr, 10, 0, ['Foo', 'Bar'])
        Assert Equals(failed, 1)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Darkness',
              \ 'Friend',
              \])

        let failed = Writer.replace(bufnr, -10, 0, ['Foo', 'Bar'])
        Assert Equals(failed, 1)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Darkness',
              \ 'Friend',
              \])
      End

      It returns 1 and do not modify content if {end} is out-of-range
        let failed = Writer.replace(bufnr, 0, 10, ['Foo', 'Bar'])
        Assert Equals(failed, 1)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Darkness',
              \ 'Friend',
              \])

        let failed = Writer.replace(bufnr, 0, -10, ['Foo', 'Bar'])
        Assert Equals(failed, 1)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Darkness',
              \ 'Friend',
              \])
      End

      It inserts lines at a given index
        call Writer.replace(bufnr, 2, 2, ['My', 'Old'])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Darkness',
              \ 'My',
              \ 'Old',
              \ 'Friend',
              \])
      End

      It inserts lines at a given negative index
        call Writer.replace(bufnr, -1, -1, ['My', 'Old'])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Darkness',
              \ 'Friend',
              \ 'My',
              \ 'Old',
              \])
      End

      It replaces lines between a given range
        call Writer.replace(bufnr, 1, 2, ['My', 'World'])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'My',
              \ 'World',
              \ 'Friend',
              \])
      End

      It replaces lines between a given negative range
        call Writer.replace(bufnr, -2, -1, ['My', 'World'])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Darkness',
              \ 'My',
              \ 'World',
              \])
      End

      It removes lines between a given range when {replacement} is an empty list
        call Writer.replace(bufnr, 1, 2, [])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Friend',
              \])
      End

      It removes lines between a given negative range when {replacement} is an empty list
        call Writer.replace(bufnr, -2, -1, [])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Darkness',
              \])

        call Writer.replace(bufnr, 0, -1, [])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ '',
              \])
      End

      It removes lines between a given positive/negative range when {replacement} is an empty list
        call Writer.replace(bufnr, 0, -1, [])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ '',
              \])
      End

      Context a current buffer
        It should NOT change a current buffer (insert)
          let expect = bufnr('%')
          call Writer.replace(bufnr, 2, 2, ['My', 'Old'])
          Assert Equals(bufnr('%'), expect)
        End

        It should NOT change a current buffer (insert, negative)
          let expect = bufnr('%')
          call Writer.replace(bufnr, -1, -1, ['My', 'Old'])
          Assert Equals(bufnr('%'), expect)
        End

        It should NOT change a current buffer (replace)
          let expect = bufnr('%')
          call Writer.replace(bufnr, 1, 2, ['My', 'World'])
          Assert Equals(bufnr('%'), expect)
        End

        It should NOT change a current buffer (replace, negative)
          let expect = bufnr('%')
          call Writer.replace(bufnr, -2, -1, ['My', 'World'])
          Assert Equals(bufnr('%'), expect)
        End

        It should NOT change a current buffer (remove)
          let expect = bufnr('%')
          call Writer.replace(bufnr, 1, 2, [])
          Assert Equals(bufnr('%'), expect)
        End

        It should NOT change a current buffer (remove, negative)
          let expect = bufnr('%')
          call Writer.replace(bufnr, -2, -1, [])
          Assert Equals(bufnr('%'), expect)
        End

        It should NOT change a current buffer (remove, positive/negative)
          let expect = bufnr('%')
          call Writer.replace(bufnr, 0, -1, [])
          Assert Equals(bufnr('%'), expect)
        End
      End

      Context an alternate-file
        It should NOT change an alternate-file (insert)
          let expect = bufnr('#')
          call Writer.replace(bufnr, 2, 2, ['My', 'Old'])
          Assert Equals(bufnr('#'), expect)
        End

        It should NOT change an alternate-file (insert, negative)
          let expect = bufnr('#')
          call Writer.replace(bufnr, -1, -1, ['My', 'Old'])
          Assert Equals(bufnr('#'), expect)
        End

        It should NOT change an alternate-file (replace)
          let expect = bufnr('#')
          call Writer.replace(bufnr, 1, 2, ['My', 'World'])
          Assert Equals(bufnr('#'), expect)
        End

        It should NOT change an alternate-file (replace, negative)
          let expect = bufnr('#')
          call Writer.replace(bufnr, -2, -1, ['My', 'World'])
          Assert Equals(bufnr('#'), expect)
        End

        It should NOT change an alternate-file (remove)
          let expect = bufnr('#')
          call Writer.replace(bufnr, 1, 2, [])
          Assert Equals(bufnr('#'), expect)
        End

        It should NOT change an alternate-file (remove, negative)
          let expect = bufnr('#')
          call Writer.replace(bufnr, -2, -1, [])
          Assert Equals(bufnr('#'), expect)
        End

        It should NOT change an alternate-file (remove, positive/negative)
          let expect = bufnr('#')
          call Writer.replace(bufnr, 0, -1, [])
          Assert Equals(bufnr('#'), expect)
        End
      End

      Context a cursor position
        It should NOT change a cursor position (insert)
          let expect = getcurpos()
          call Writer.replace(bufnr, 2, 2, ['My', 'Old'])
          Assert Equals(getcurpos(), expect)
        End

        It should NOT change a cursor position (insert, negative)
          let expect = getcurpos()
          call Writer.replace(bufnr, -1, -1, ['My', 'Old'])
          Assert Equals(getcurpos(), expect)
        End

        It should NOT change a cursor position (replace)
          let expect = getcurpos()
          call Writer.replace(bufnr, 1, 2, ['My', 'World'])
          Assert Equals(getcurpos(), expect)
        End

        It should NOT change a cursor position (replace, negative)
          let expect = getcurpos()
          call Writer.replace(bufnr, -2, -1, ['My', 'World'])
          Assert Equals(getcurpos(), expect)
        End

        It should NOT change a cursor position (remove)
          let expect = getcurpos()
          call Writer.replace(bufnr, 1, 2, [])
          Assert Equals(getcurpos(), expect)
        End

        It should NOT change a cursor position (remove, negative)
          let expect = getcurpos()
          call Writer.replace(bufnr, -2, -1, [])
          Assert Equals(getcurpos(), expect)
        End

        It should NOT change a cursor position (remove, positive/negative)
          let expect = getcurpos()
          call Writer.replace(bufnr, 0, -1, [])
          Assert Equals(getcurpos(), expect)
        End
      End

      Context a jumplist
        It should NOT change a jumplist (insert)
          let expect = split(execute('jumps'), '\r\?\n')
          call Writer.replace(bufnr, 2, 2, ['My', 'Old'])
          Assert Equals(split(execute('jumps'), '\r\?\n'), expect)
        End

        It should NOT change a jumplist (insert, negative)
          let expect = split(execute('jumps'), '\r\?\n')
          call Writer.replace(bufnr, -1, -1, ['My', 'Old'])
          Assert Equals(split(execute('jumps'), '\r\?\n'), expect)
        End

        It should NOT change a jumplist (replace)
          let expect = split(execute('jumps'), '\r\?\n')
          call Writer.replace(bufnr, 1, 2, ['My', 'World'])
          Assert Equals(split(execute('jumps'), '\r\?\n'), expect)
        End

        It should NOT change a jumplist (replace, negative)
          let expect = split(execute('jumps'), '\r\?\n')
          call Writer.replace(bufnr, -2, -1, ['My', 'World'])
          Assert Equals(split(execute('jumps'), '\r\?\n'), expect)
        End

        It should NOT change a jumplist (replace, positive/negative)
          let expect = split(execute('jumps'), '\r\?\n')
          call Writer.replace(bufnr, 0, -1, ['My', 'World'])
          Assert Equals(split(execute('jumps'), '\r\?\n'), expect)
        End

        It should NOT change a jumplist (remove)
          let expect = split(execute('jumps'), '\r\?\n')
          call Writer.replace(bufnr, 1, 2, [])
          Assert Equals(split(execute('jumps'), '\r\?\n'), expect)
        End

        It should NOT change a jumplist (remove, negative)
          let expect = split(execute('jumps'), '\r\?\n')
          call Writer.replace(bufnr, -2, -1, [])
          Assert Equals(split(execute('jumps'), '\r\?\n'), expect)
        End

        It should NOT change a jumplist (remove, positive/negative)
          let expect = split(execute('jumps'), '\r\?\n')
          call Writer.replace(bufnr, 0, -1, [])
          Assert Equals(split(execute('jumps'), '\r\?\n'), expect)
        End
      End
    End

    Context Encoding
      It replaces utf-8 content correctly when fileencoding is correct
        let encoding = encodings['utf-8']
        edit foo1 | execute('setlocal fileencoding=' . encoding.name)
        vnew foo2
        let bufnr = bufnr('foo1')
        let content = readfile(encoding.filename)
        call Writer.replace(bufnr, 0, -1, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding'), encoding.name)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉP',
              \])
      End

      It replaces sjis content correctly when fileencoding is correct
        let encoding = encodings['sjis']
        edit foo1 | execute('setlocal fileencoding=' . encoding.name)
        vnew foo2
        let bufnr = bufnr('foo1')
        let content = readfile(encoding.filename)
        call Writer.replace(bufnr, 0, -1, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding'), encoding.name)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'こんにちわ コンニチワ',
              \ '今日和 ｺﾝﾆﾁﾜ',
              \])
      End

      It replaces euc-jp content correctly when fileencoding is correct
        let encoding = encodings['euc-jp']
        edit foo1 | execute('setlocal fileencoding=' . encoding.name)
        vnew foo2
        let bufnr = bufnr('foo1')
        let content = readfile(encoding.filename)
        call Writer.replace(bufnr, 0, -1, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding'), encoding.name)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'こんにちわ コンニチワ',
              \ '今日和 ｺﾝﾆﾁﾜ',
              \])
      End

      It replaces cp932 content correctly when fileencoding is correct
        let encoding = encodings['cp932']
        edit foo1 | execute('setlocal fileencoding=' . encoding.name)
        vnew foo2
        let bufnr = bufnr('foo1')
        let content = readfile(encoding.filename)
        call Writer.replace(bufnr, 0, -1, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding'), encoding.name)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'こんにちわ コンニチワ',
              \ '今日和 ｺﾝﾆﾁﾜ',
              \])
      End

      It replaces cp1250 content correctly when fileencoding is correct
        let encoding = encodings['cp1250']
        edit foo1 | execute('setlocal fileencoding=' . encoding.name)
        vnew foo2
        let bufnr = bufnr('foo1')
        let content = readfile(encoding.filename)
        call Writer.replace(bufnr, 0, -1, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding'), encoding.name)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉP',
              \])
      End
    End
  End

  Describe .new({options})
    It returns a new writer instance
      let writer = Writer.new()
      Assert KeyExists(writer, 'bufnr')
      Assert KeyExists(writer, 'updatetime')
      Assert KeyExists(writer, 'start')
      Assert KeyExists(writer, 'stop')
      Assert KeyExists(writer, 'kill')
      Assert KeyExists(writer, 'write')
      Assert KeyExists(writer, 'flush')
    End

    Describe A writer instance
      Context Buffer which is shown on the other window
        Before
          edit foo2
          vnew foo1
          let bufnr = bufnr('foo1')
        End

        It repeatedly flush a queued content into the assigned buffer
          let waittime = (Writer.updatetime * 5) . 'm'
          let writer = Writer.new({'bufnr': bufnr})
          call writer.write(['Hello', ''])
          call writer.write(['Hello', ''])
          call writer.write(['Hello', ''])
          execute 'sleep' waittime
          Assert Equals(getbufline(bufnr, 1, '$'), [''])

          call writer.start()
          execute 'sleep' waittime
          Assert Equals(getbufline(bufnr, 1, '$'), [
                \ 'Hello',
                \ 'Hello',
                \ 'Hello',
                \ '',
                \])

          call writer.write(['Hello', ''])
          Assert Equals(getbufline(bufnr, 1, '$'), [
                \ 'Hello',
                \ 'Hello',
                \ 'Hello',
                \ '',
                \])
          execute 'sleep' waittime
          Assert Equals(getbufline(bufnr, 1, '$'), [
                \ 'Hello',
                \ 'Hello',
                \ 'Hello',
                \ 'Hello',
                \ '',
                \])

          call writer.stop()
          Assert Equals(getbufline(bufnr, 1, '$'), [
                \ 'Hello',
                \ 'Hello',
                \ 'Hello',
                \ 'Hello',
                \ '',
                \])
          execute 'sleep' waittime
          Assert Equals(getbufline(bufnr, 1, '$'), [
                \ 'Hello',
                \ 'Hello',
                \ 'Hello',
                \ 'Hello',
                \])
          call writer.kill()
        End
      End

      Context Buffer which is shown on the other window
        Before
          edit foo1
          vnew foo2
          let bufnr = bufnr('foo1')
        End

        It repeatedly flush a queued content into the assigned buffer
          let waittime = (Writer.updatetime * 5) . 'm'
          let writer = Writer.new({'bufnr': bufnr})
          call writer.write(['Hello', ''])
          call writer.write(['Hello', ''])
          call writer.write(['Hello', ''])
          execute 'sleep' waittime
          Assert Equals(getbufline(bufnr, 1, '$'), [''])

          call writer.start()
          execute 'sleep' waittime
          Assert Equals(getbufline(bufnr, 1, '$'), [
                \ 'Hello',
                \ 'Hello',
                \ 'Hello',
                \ '',
                \])

          call writer.write(['Hello', ''])
          Assert Equals(getbufline(bufnr, 1, '$'), [
                \ 'Hello',
                \ 'Hello',
                \ 'Hello',
                \ '',
                \])
          execute 'sleep' waittime
          Assert Equals(getbufline(bufnr, 1, '$'), [
                \ 'Hello',
                \ 'Hello',
                \ 'Hello',
                \ 'Hello',
                \ '',
                \])

          call writer.stop()
          Assert Equals(getbufline(bufnr, 1, '$'), [
                \ 'Hello',
                \ 'Hello',
                \ 'Hello',
                \ 'Hello',
                \ '',
                \])
          execute 'sleep' waittime
          Assert Equals(getbufline(bufnr, 1, '$'), [
                \ 'Hello',
                \ 'Hello',
                \ 'Hello',
                \ 'Hello',
                \])
          call writer.kill()
        End
      End

      Context Buffer which is hidden
        Before
          edit foo1 | setlocal bufhidden=hide
          edit foo2 | setlocal bufhidden=hide
          let bufnr = bufnr('foo1')
        End

        It does not flush content until the buffer is shown
          let waittime = (Writer.updatetime * 5) . 'm'
          let writer = Writer.new({'bufnr': bufnr})
          call writer.write(['Hello', ''])
          call writer.write(['Hello', ''])
          call writer.write(['Hello', ''])
          execute 'sleep' waittime
          Assert Equals(getbufline(bufnr, 1, '$'), [''])

          call writer.start()
          execute 'sleep' waittime
          Assert Equals(getbufline(bufnr, 1, '$'), [''])
          execute printf('%dbuffer', bufnr)
          execute 'sleep' waittime
          Assert Equals(getbufline(bufnr, 1, '$'), [
                \ 'Hello',
                \ 'Hello',
                \ 'Hello',
                \ '',
                \])

          edit foo2
          call writer.write(['Hello', ''])
          Assert Equals(getbufline(bufnr, 1, '$'), [
                \ 'Hello',
                \ 'Hello',
                \ 'Hello',
                \ '',
                \])
          execute 'sleep' waittime
          Assert Equals(getbufline(bufnr, 1, '$'), [
                \ 'Hello',
                \ 'Hello',
                \ 'Hello',
                \ '',
                \])
          execute printf('%dbuffer', bufnr)
          execute 'sleep' waittime
          Assert Equals(getbufline(bufnr, 1, '$'), [
                \ 'Hello',
                \ 'Hello',
                \ 'Hello',
                \ 'Hello',
                \ '',
                \])

          " NOTE: Removing an extra line at EOF after 'stop' is not 'flush'
          " so it is performed even the buffer is hidden after 'waittime'
          edit foo2
          call writer.stop()
          Assert Equals(getbufline(bufnr, 1, '$'), [
                \ 'Hello',
                \ 'Hello',
                \ 'Hello',
                \ 'Hello',
                \ '',
                \])
          execute 'sleep' waittime
          Assert Equals(getbufline(bufnr, 1, '$'), [
                \ 'Hello',
                \ 'Hello',
                \ 'Hello',
                \ 'Hello',
                \])
          call writer.kill()
        End
      End
    End
  End
End
