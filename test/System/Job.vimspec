let s:is_windows = has('win32') || has('win64')

Describe System.Job
  Before all
    let TIMEOUT = s:is_windows ? 50000 : 5000
    let Path = vital#vital#import('System.Filepath')
    let Sandbox = vital#vital#import('System.Sandbox')

    let root = Path.abspath(Path.realpath('test/_testdata/System/Job'))

    function! Args(script, ...) abort closure
      let p = executable('python3') ? 'python3' : 'python'
      let s = Path.join(root, a:script)
      return [p, s] + a:000
    endfunction

    function! Lines(...) abort
      return join(a:000, "\n")
    endfunction

    function! OnStderr(data) abort dict
      call map(a:data, 'v:val[-1:] ==# "\r" ? v:val[:-2] : v:val')
      call filter(
            \ map(a:data, 'substitute(v:val, ''^\s\+\|\s\+$'', '''', ''g'')'),
            \ '!empty(v:val)',
            \)
      for line in a:data
        call themis#log(line)
      endfor
    endfunction

    function! OnReceive(data) abort dict
      let self._received[-1] .= a:data[0]
      call extend(self._received, a:data[1:])
    endfunction

    function! OnReceiveText(data) abort dict
      call map(a:data, 'v:val[-1:] ==# "\r" ? v:val[:-2] : v:val')
      let self._received[-1] .= a:data[0]
      call extend(self._received, a:data[1:])
    endfunction
  End

  Before
    let Job = healthcheck#vital#import('System.Job')
    let options = {
          \ 'on_stdout': { -> 0 },
          \ 'on_stderr': funcref('OnStderr'),
          \}
  End

  Describe .start({cmd}[, {options}])
    It starts a job with {cmd} (List) and return a job instance
      let job = Job.start(Args('exit.py'), options)
      Assert KeyExists(job, 'status')
      Assert KeyExists(job, 'wait')
      Assert KeyExists(job, 'send')
      Assert KeyExists(job, 'stop')
      call job.stop()
      call job.wait(TIMEOUT)
    End

    It throws an exception when {args} is not a List instance
      Throws /Argument requires to be a List instance/ Job.start('')
      Throws /Argument requires to be a List instance/ Job.start(0)
      Throws /Argument requires to be a List instance/ Job.start({})
    End

    It throws an exception when {args} is an empty list
      Throws /Argument vector must have at least one item/ Job.start([])
    End

    It throws an exception when a first item of {args} is not executable
      Throws /"foo" is not an executable/ Job.start(['foo'])
    End

    if has('patch-8.0.0902') || has('nvim')
      Context cwd option
        Before
          let sandbox = Sandbox.new()
          let options = extend(options, {
                \ '_received': [''],
                \ 'on_stdout': funcref('OnReceiveText'),
                \})
        End

        After
          call sandbox.dispose()
        End

        It starts a job in a current working directory
          call sandbox.visit('foo')
          call sandbox.visit('bar')
          let job = Job.start(Args('cwd.py'), options)
          Assert Equals(job.wait(TIMEOUT), 0)
          Assert Equals(job._received, [sandbox.path('bar'), ''])
        End

        It starts a job in a given cwd
          call sandbox.visit('foo')
          call sandbox.visit('bar')
          let job = Job.start(Args('cwd.py'), extend(options, {
                \ 'cwd': sandbox.path('foo'),
                \}))
          Assert Equals(job.wait(TIMEOUT), 0)
          Assert Equals(job._received, [sandbox.path('foo'), ''])
        End
      End
    endif
  End

  Describe Callbacks
    Describe .on_stdout() callback
      Before
        let options = extend(options, {
              \ '_received': [''],
              \ 'on_stdout': funcref('OnReceive'),
              \})
      End

      It is called with raw {data} (CR)
        let job = Job.start(Args('echo.py', '--newline', "\r", '--out', 'stdout'), options)
        Assert Equals(job.wait(TIMEOUT), 0)
        Assert Equals(job._received, [
              \ "Hello World\rHello World\rThis is not line",
              \])
      End

      It is called with raw {data} (LF)
        let job = Job.start(Args('echo.py', '--newline', "\n", '--out', 'stdout'), options)
        Assert Equals(job.wait(TIMEOUT), 0)
        Assert Equals(job._received, [
              \ 'Hello World',
              \ 'Hello World',
              \ 'This is not line',
              \])
      End

      It is called with raw {data} (CRLF)
        let job = Job.start(Args('echo.py', '--newline', "\r\n", '--out', 'stdout'), options)
        Assert Equals(job.wait(TIMEOUT), 0)
        Assert Equals(job._received, [
              \ "Hello World\r",
              \ "Hello World\r",
              \ 'This is not line',
              \])
      End
    End

    Describe .on_stderr() callback
      Before
        let options = extend(options, {
              \ '_received': [''],
              \ 'on_stderr': funcref('OnReceive'),
              \})
      End

      It is called with raw {data} (CR)
        let job = Job.start(Args('echo.py', '--newline', "\r", '--out', 'stderr'), options)
        Assert Equals(job.wait(TIMEOUT), 0)
        Assert Equals(job._received, [
              \ "Hello World\rHello World\rThis is not line",
              \])
      End

      It is called with raw {data} (LF)
        let job = Job.start(Args('echo.py', '--newline', "\n", '--out', 'stderr'), options)
        Assert Equals(job.wait(TIMEOUT), 0)
        Assert Equals(job._received, [
              \ 'Hello World',
              \ 'Hello World',
              \ 'This is not line',
              \])
      End

      It is called with raw {data} (CRLF)
        let job = Job.start(Args('echo.py', '--newline', "\r\n", '--out', 'stderr'), options)
        Assert Equals(job.wait(TIMEOUT), 0)
        Assert Equals(job._received, [
              \ "Hello World\r",
              \ "Hello World\r",
              \ 'This is not line',
              \])
      End
    End

    Describe .on_exit() callback
      Before
        function! s:on_exit(exitval) abort dict
          call add(self._exitval, a:exitval)
        endfunction

        let options = extend(options, {
              \ '_exitval': [],
              \ 'on_exit': funcref('s:on_exit'),
              \})
      End

      It is called with an exitval
        let path = Path.join(root, 'exitval.py')
        let job = Job.start(Args('exit.py', '--exitval', '0'), options)
        Assert Equals(job.wait(TIMEOUT), 0)
        Assert Equals(job._exitval, [0])

        let job = Job.start(Args('exit.py', '--exitval', '1'), options)
        Assert Equals(job.wait(TIMEOUT), 1)
        Assert Equals(job._exitval, [0, 1])

        let job = Job.start(Args('exit.py', '--exitval', '2'), options)
        Assert Equals(job.wait(TIMEOUT), 2)
        Assert Equals(job._exitval, [0, 1, 2])
      End
    End
  End

  Describe Job instance
    Describe .pid()
      It returns a unique number for individual process
        let job1 = Job.start(Args('never.py'), options)
        let job2 = Job.start(Args('never.py'), options)
        Assert IsNumber(job1.pid())
        Assert IsNumber(job2.pid())
        Assert NotEqual(job1.pid(), job2.pid())
        call job1.stop()
        call job2.stop()
        call job1.wait(TIMEOUT)
        call job2.wait(TIMEOUT)
      End
    End

    Describe .status()
      It returns 'run' when a job is running
        let job = Job.start(Args('never.py'), options)
        Assert Equals(job.status(), 'run')
        call job.stop()
        call job.wait(TIMEOUT)
      End

      It returns 'dead' when a job has terminated
        let job = Job.start(Args('never.py'), options)
        call job.stop()
        call job.wait(TIMEOUT)
        Assert Equals(job.status(), 'dead')
      End
    End

    Describe .send()
      Before
        let options = extend(options, {
              \ '_received': [''],
              \ 'on_stdout': funcref('OnReceiveText'),
              \})
      End

      It sends {data} (String) to a job
        let job = Job.start(Args('reply.py'), options)
        call job.send('Hello')
        call job.send(" World\n")
        call job.close()
        Assert Equals(job.wait(TIMEOUT), 0)
        Assert Equals(job._received, ['received: Hello World', ''])
      End

      It sends {data} (List) to the job
        let job = Job.start(Args('reply.py'), options)
        call job.send(['abc', "123\n456", ''])
        call job.send(['.', ''])
        call job.close()
        Assert Equals(job.wait(TIMEOUT), 0)
        if has('nvim')
          Assert Equals(job._received, [
                \ 'received: abc',
                \ 'received: 123<NUL>456',
                \ 'received: .',
                \ '',
                \])
        else
          " Vim cannot send \0
          Assert Equals(job._received, [
                \ 'received: abc',
                \ 'received: 123456',
                \ 'received: .',
                \ '',
                \])
        endif
      End
    End

    Describe .close()
      Before
        let options = extend(options, {
              \ '_received': [''],
              \ 'on_stdout': funcref('OnReceiveText'),
              \})
      End

      It sends EOF (close stdin) to a job
        let job = Job.start(Args('reply.py', '--interval', '0'), options)
        call job.send("Hello\n")
        call job.send("Darkness\n")
        call job.send("My\n")
        call job.send("Old\n")
        call job.send("Friend\n")
        " EOF has not been sent so the following should be timeout
        Assert Equals(job.wait(500), -1)
        Assert Equals(job._received, [
              \ 'received: Hello',
              \ 'received: Darkness',
              \ 'received: My',
              \ 'received: Old',
              \ 'received: Friend',
              \ '',
              \])
        call job.close()
        Assert Equals(job.wait(TIMEOUT), 0)
      End
    End

    Describe .stop()
      It stop a job which is running
        let job = Job.start(Args('never.py'), options)
        call job.stop()
        call job.wait(TIMEOUT)
        Assert Equals(job.status(), 'dead')
      End

      It does nothing when a job has already terminated
        let job = Job.start(Args('never.py'), options)
        call job.stop()
        call job.stop()
        call job.wait(TIMEOUT)
        Assert Equals(job.status(), 'dead')
      End
    End

    Describe .wait()
      It waits a job to terminate
        let job = Job.start(Args('echo.py'), options)
        Assert Equals(job.wait(TIMEOUT), 0)
        Assert Equals(job.status(), 'dead')
      End

      It returns an exit status when a job has terminated
        let job = Job.start(Args('exit.py', '--delay', '100', '--exitval', '0'), options)
        Assert Equals(job.wait(TIMEOUT), 0)
        Assert Equals(job.status(), 'dead')

        let job = Job.start(Args('exit.py', '--delay', '100', '--exitval', '1'), options)
        Assert Equals(job.wait(TIMEOUT), 1)
        Assert Equals(job.status(), 'dead')

        let job = Job.start(Args('exit.py', '--delay', '100', '--exitval', '2'), options)
        Assert Equals(job.wait(TIMEOUT), 2)
        Assert Equals(job.status(), 'dead')
      End

      It returns an exit status when a job has already been terminated
        let job = Job.start(Args('exit.py', '--exitval', '0'), options)
        call job.wait(TIMEOUT)
        Assert Equals(job.status(), 'dead')
        Assert Equals(job.wait(TIMEOUT), 0)

        let job = Job.start(Args('exit.py', '--exitval', '1'), options)
        call job.wait(TIMEOUT)
        Assert Equals(job.status(), 'dead')
        Assert Equals(job.wait(TIMEOUT), 1)

        let job = Job.start(Args('exit.py', '--exitval', '2'), options)
        call job.wait(TIMEOUT)
        Assert Equals(job.status(), 'dead')
        Assert Equals(job.wait(TIMEOUT), 2)
      End

      It returns -1 when a job did not terminate within {timeout}
        let job = Job.start(Args('never.py'), options)
        Assert Equals(job.wait(100), -1)
        Assert Equals(job.status(), 'run')
        call job.stop()
        call job.wait(TIMEOUT)
      End
    End
  End
End
