let s:is_windows = has('win32') || has('win64')

function! s:on_stderr(data) abort dict
  call map(a:data, 'v:val[-1:] ==# "\r" ? v:val[:-2] : v:val')
  call filter(
        \ map(a:data, 'substitute(v:val, ''^\s\+\|\s\+$'', '''', ''g'')'),
        \ '!empty(v:val)',
        \)
  for line in a:data
    call themis#log(line)
  endfor
endfunction

function! s:on_receive(data) abort dict
  let self._received[-1] .= a:data[0]
  call extend(self._received, a:data[1:])
endfunction

function! s:on_receive_text(data) abort dict
  call map(a:data, 'v:val[-1:] ==# "\r" ? v:val[:-2] : v:val')
  let self._received[-1] .= a:data[0]
  call extend(self._received, a:data[1:])
endfunction

Describe System.Job
  Before all
    let python = executable('python3') ? 'python3' : 'python'
    let Path = vital#vital#import('System.Filepath')
    let root = fnamemodify(Path.realpath('test/_testdata/System/Job'), ':p')

    function! Lines(...) abort
      return join(a:000, "\n")
    endfunction
  End

  Before
    let Job = healthcheck#vital#import('System.Job')
    let options = {
          \ 'on_stderr': funcref('s:on_stderr')
          \}
  End

  After
    " Relax
    sleep 100m
  End

  Describe .start({cmd}[, {options}])
    It starts a job with {cmd} (List) and return a job instance
      let path = Path.join(root, '2sec.py')
      let job = Job.start([python, path], options)
      Assert KeyExists(job, 'status')
      Assert KeyExists(job, 'wait')
      Assert KeyExists(job, 'send')
      Assert KeyExists(job, 'stop')
      call job.stop()
      call job.wait(5000)
    End

    It throws an exception when {args} is not a List instance
      Throws /Argument requires to be a List instance/ Job.start('')
      Throws /Argument requires to be a List instance/ Job.start(0)
      Throws /Argument requires to be a List instance/ Job.start({})
    End

    It throws an exception when {args} is an empty list
      Throws /Argument vector must have at least one item/ Job.start([])
    End

    It throws an exception when a first item of {args} is not executable
      Throws /"foo" is not an executable/ Job.start(['foo'])
    End

    if has('patch-8.0.0902') || has('nvim')
      It starts a job with a given {cwd}
        let path = Path.join(root, 'cwd.py')
        let job = Job.start([python, path], extend(options, {
              \ '_received': [''],
              \ 'on_stdout': funcref('s:on_receive_text'),
              \}))
        Assert Equals(job.wait(5000), 0)
        Assert Equals(job._received, [getcwd(), ''])

        let saved_cwd = getcwd()
        let cwd = fnamemodify(getcwd(), ':h:p')
        let job = Job.start([python, path], extend(options, {
              \ '_received': [''],
              \ 'on_stdout': funcref('s:on_receive_text'),
              \ 'cwd': cwd,
              \}))
        Assert Equals(job.wait(5000), 0)
        Assert Equals(job._received, [cwd, ''])
        Assert Equals(getcwd(), saved_cwd)
      End
    endif
  End

  Describe callbacks
    Describe .on_stdout() callback
      Before
        let options = extend(options, {
              \ '_received': [''],
              \ 'on_stdout': funcref('s:on_receive'),
              \})
      End

      if s:is_windows
        It is called with {data} (Windows: CRLF)
          let path = Path.join(root, 'echo.py')
          let job = Job.start([python, path, 'stdout'], options)
          Assert Equals(job.wait(5000), 0)
          Assert Equals(job._received, [
                \ "Hello World\r",
                \ "Hello World\r",
                \ 'This is not line',
                \])
        End
      else
        It is called with {data} (Unix: LF)
          let path = Path.join(root, 'echo.py')
          let job = Job.start([python, path, 'stdout'], options)
          Assert Equals(job.wait(5000), 0)
          Assert Equals(job._received, [
                \ 'Hello World',
                \ 'Hello World',
                \ 'This is not line',
                \])
        End
      endif

      It is called with raw {data} (CR)
        let path = Path.join(root, 'echo_raw.py')
        let job = Job.start([python, path, 'stdout', "\r"], options)
        Assert Equals(job.wait(5000), 0)
        Assert Equals(job._received, [
              \ "Hello World\rHello World\rThis is not line",
              \])
      End

      It is called with raw {data} (LF)
        let path = Path.join(root, 'echo_raw.py')
        let job = Job.start([python, path, 'stdout', "\n"], options)
        Assert Equals(job.wait(5000), 0)
        Assert Equals(job._received, [
              \ 'Hello World',
              \ 'Hello World',
              \ 'This is not line',
              \])
      End

      It is called with raw {data} (CRLF)
        let path = Path.join(root, 'echo_raw.py')
        let job = Job.start([python, path, 'stdout', "\r\n"], options)
        Assert Equals(job.wait(5000), 0)
        Assert Equals(job._received, [
              \ "Hello World\r",
              \ "Hello World\r",
              \ 'This is not line',
              \])
      End
    End

    Describe .on_stderr() callback
      Before
        let options = extend(options, {
              \ '_received': [''],
              \ 'on_stderr': funcref('s:on_receive'),
              \})
      End

      if s:is_windows
        It is called with {data} (Windows: CRLF)
          let path = Path.join(root, 'echo.py')
          let job = Job.start([python, path, 'stderr'], options)
          Assert Equals(job.wait(5000), 0)
          Assert Equals(job._received, [
                \ "Hello World\r",
                \ "Hello World\r",
                \ 'This is not line',
                \])
        End
      else
        It is called with {data} (Unix: LF)
          let path = Path.join(root, 'echo.py')
          let job = Job.start([python, path, 'stderr'], options)
          Assert Equals(job.wait(5000), 0)
          Assert Equals(job._received, [
                \ 'Hello World',
                \ 'Hello World',
                \ 'This is not line',
                \])
        End
      endif

      It is called with raw {data} (CR)
        let path = Path.join(root, 'echo_raw.py')
        let job = Job.start([python, path, 'stderr', "\r"], options)
        Assert Equals(job.wait(5000), 0)
        Assert Equals(job._received, [
              \ "Hello World\rHello World\rThis is not line",
              \])
      End

      It is called with raw {data} (LF)
        let path = Path.join(root, 'echo_raw.py')
        let job = Job.start([python, path, 'stderr', "\n"], options)
        Assert Equals(job.wait(5000), 0)
        Assert Equals(job._received, [
              \ 'Hello World',
              \ 'Hello World',
              \ 'This is not line',
              \])
      End

      It is called with raw {data} (CRLF)
        let path = Path.join(root, 'echo_raw.py')
        let job = Job.start([python, path, 'stderr', "\r\n"], options)
        Assert Equals(job.wait(5000), 0)
        Assert Equals(job._received, [
              \ "Hello World\r",
              \ "Hello World\r",
              \ 'This is not line',
              \])
      End
    End

    Describe .on_exit() callback
      Before
        function! s:on_exit(exitcode) abort dict
          call add(self._exitcode, a:exitcode)
        endfunction

        let options = extend(options, {
              \ '_exitcode': [],
              \ 'on_exit': funcref('s:on_exit'),
              \})
      End

      It is called with an exitcode
        let path = Path.join(root, 'exitval.py')
        let job = Job.start([python, path, '0'], options)
        Assert Equals(job.wait(5000), 0)
        Assert Equals(job._exitcode, [0])

        let job = Job.start([python, path, '1'], options)
        Assert Equals(job.wait(5000), 1)
        Assert Equals(job._exitcode, [0, 1])

        let job = Job.start([python, path, '2'], options)
        Assert Equals(job.wait(5000), 2)
        Assert Equals(job._exitcode, [0, 1, 2])
      End
    End

  End

  Describe An instance
    Describe .pid()
      It returns a unique number for individual process
        let path = Path.join(root, 'infinity_loop.py')
        let job1 = Job.start([python, path], options)
        let job2 = Job.start([python, path], options)
        Assert IsNumber(job1.pid())
        Assert IsNumber(job2.pid())
        Assert NotEqual(job1.pid(), job2.pid())
        call job1.stop()
        call job2.stop()
        call job1.wait(5000)
        call job2.wait(5000)
      End
    End

    Describe .status()
      It returns 'run' when a job is running
        let path = Path.join(root, 'infinity_loop.py')
        let job = Job.start([python, path], options)
        Assert Equals(job.status(), 'run')
        call job.stop()
        call job.wait(5000)
      End

      It returns 'dead' when a job has terminated
        let path = Path.join(root, 'infinity_loop.py')
        let job = Job.start([python, path], options)
        call job.stop()
        call job.wait(5000)
        Assert Equals(job.status(), 'dead')
      End
    End

    Describe .send({data})
      Before
        let options = extend(options, {
              \ '_received': [''],
              \ 'on_stdout': funcref('s:on_receive_text'),
              \})
      End

      It sends {data} (String) to a job
        let path = Path.join(root, 'input.py')
        let job = Job.start([python, path], options)
        call job.send("lambdalisue\n")
        Assert Equals(job.wait(5000), 0)
        Assert Equals(job._received, ['Please input your name: Hello lambdalisue', ''])
      End

      It sends {data} (List) to the job
        let path = Path.join(root, 'read.py')
        let job = Job.start([python, path], options)
        call job.send(['abc', "123\n456", ''])
        call job.send(['.', ''])
        Assert Equals(job.wait(5000), 0)
        if has('nvim')
          Assert Equals(job._received, [
                \ 'read:',
                \ 'abc',
                \ '123<NUL>456',
                \ '',
                \ '',
                \])
        else
          " Vim cannot send \0
          Assert Equals(job._received, [
                \ 'read:',
                \ 'abc',
                \ '123456',
                \ '',
                \ '',
                \])
        endif
      End
    End

    Describe .close()
      Before
        let options = extend(options, {
              \ '_received': [''],
              \ 'on_stdout': funcref('s:on_receive_text'),
              \})
      End

      It sends EOF (close stdin) to a job
        let path = Path.join(root, 'cat.py')
        let job = Job.start([python, path], options)
        call job.send("Hello\n")
        call job.send("Darkness\n")
        call job.send("My\n")
        call job.send("Old\n")
        call job.send("Friend\n")
        " EOF has not been sent so the following should be timeout
        sleep 10m
        Assert Equals(job.wait(1000), -1)
        Assert Equals(job._received, [''])
        call job.close()
        sleep 10m
        Assert Equals(job.wait(1000), 0)
        Assert Equals(job._received, [
              \ 'IN: Hello',
              \ 'IN: Darkness',
              \ 'IN: My',
              \ 'IN: Old',
              \ 'IN: Friend',
              \ '',
              \])
      End
    End

    Describe .stop()
      It stop a job which is running
        let path = Path.join(root, 'infinity_loop.py')
        let job = Job.start([python, path], options)
        call job.stop()
        call job.wait(5000)
        Assert Equals(job.status(), 'dead')
      End

      It does nothing when a job has already terminated
        let path = Path.join(root, 'infinity_loop.py')
        let job = Job.start([python, path], options)
        call job.stop()
        call job.stop()
      End
    End

    Describe .wait([{timeout}])
      It waits a job to terminate
        let path = Path.join(root, '2sec.py')
        let job = Job.start([python, path], options)
        let start = reltime()
        let exitval = job.wait(5000)
        let delta = reltime(start)
        Assert Equals(exitval, 0)
        Assert Equals(job.status(), 'dead')
        Assert Compare(reltimefloat(delta), '>', 2.0)
        Assert Compare(reltimefloat(delta), '<', 5.0)
      End

      It returns an exit status when a job has terminated
        let path = Path.join(root, 'exitval_delay.py')
        let job = Job.start([python, path, '0'], options)
        Assert Equals(job.wait(5000), 0)

        let job = Job.start([python, path, '1'], options)
        Assert Equals(job.wait(5000), 1)

        let job = Job.start([python, path, '2'], options)
        Assert Equals(job.wait(5000), 2)
      End

      It returns an exit status when a job has already been terminated
        let path = Path.join(root, 'exitval.py')
        let job = Job.start([python, path, '0'], options)
        sleep 1
        Assert Equals(job.wait(5000), 0)

        let job = Job.start([python, path, '1'], options)
        sleep 1
        Assert Equals(job.wait(5000), 1)

        let job = Job.start([python, path, '2'], options)
        sleep 1
        Assert Equals(job.wait(5000), 2)
      End

      It returns -1 when a job did not terminate within {timeout}
        let script = Path.join(root, 'infinity_loop.py')
        let job = Job.start([python, script], options)
        let start = reltime()
        let exitval = job.wait(10)
        let delta = reltime(start)
        Assert Equals(exitval, -1)
        Assert Equals(job.status(), 'run')
        Assert Compare(reltimefloat(delta), '>', 0.01)
        Assert Compare(reltimefloat(delta), '<', 0.05)
        call job.stop()
        call job.wait(5000)
      End
    End
  End
End
