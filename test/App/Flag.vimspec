Describe App.Flag
  Before
    let Flag = vital#vital#import('App.Flag')
  End

  Describe .split()
    It splits {cmdline} by a whitespace
      Assert Equals(Flag.split('foo'), ['foo'])
      Assert Equals(Flag.split('foo bar'), ['foo', 'bar'])
      Assert Equals(Flag.split('foo bar hoge'), ['foo', 'bar', 'hoge'])
    End

    It does not split {cmdline} by a single quoted whitespace
      Assert Equals(Flag.split('''foo bar'''), ['foo bar'])
      Assert Equals(Flag.split('-f''foo bar'''), ['-ffoo bar'])
      Assert Equals(Flag.split('--foo=''foo bar'''), ['--foo=foo bar'])
    End

    It does not split {cmdline} by a double quoted whitespace
      Assert Equals(Flag.split('"foo bar"'), ['foo bar'])
      Assert Equals(Flag.split('-f"foo bar"'), ['-ffoo bar'])
      Assert Equals(Flag.split('--foo="foo bar"'), ['--foo=foo bar'])
    End
  End

  Describe .parse()
    It parses {args} and return [{ns}, {args}]
      Assert Equals(Flag.parse(['-foo']), [
            \ {
            \   'foo': v:true,
            \ },
            \ [],
            \])
      Assert Equals(Flag.parse(['-foo', 'bar']), [
            \ {
            \   'foo': v:true,
            \ },
            \ ['bar'],
            \])
      Assert Equals(Flag.parse(['-foo', 'bar', '-hoge=HOGE']), [
            \ {
            \   'foo': v:true,
            \   'hoge': 'HOGE',
            \ },
            \ ['bar'],
            \])
    End
  End

  Describe .flag()
    It returns flag (0/1) for a given name
      let args = [
            \ '-foo',
            \ 'bar',
            \ '-hoge=HOGE',
            \]
      Assert True(Flag.flag(args, 'foo'))
      Assert False(Flag.flag(args, 'bar'))
      Assert False(Flag.flag(args, 'hoge'))
    End
  End

  Describe .value()
    It returns value for a given nam
      let args = [
            \ '-foo',
            \ 'bar',
            \ '-hoge=HOGE',
            \]
      Assert Equals(Flag.value(args, 'foo'), v:null)
      Assert Equals(Flag.value(args, 'bar'), v:null)
      Assert Equals(Flag.value(args, 'hoge'), 'HOGE')
    End
  End
End
