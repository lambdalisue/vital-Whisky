Describe Emitter
  Before all
    let Guard = vital#vital#import('Vim.Guard')
    let scope = themis#helper('scope')
    let vars = scope.vars('autoload/vital/__vital__/App/Emitter.vim')

    let listener = {}
    let listener.called_with = []
    function! listener.func(...) abort
      let self.called_with = a:000
    endfunction

    let middleware = {}
    let middleware.on_emit_pre_called_with = []
    let middleware.on_emit_post_called_with = []
    function! middleware.on_emit_pre(name, listeners, attrs) abort
      call add(self.on_emit_pre_called_with, [a:name, len(a:listeners), copy(a:attrs)])
      call remove(a:listeners, 0)
      call remove(a:attrs, 0)
    endfunction

    function! middleware.on_emit_post(name, listeners, attrs) abort
      call add(self.on_emit_post_called_with, [a:name, len(a:listeners), copy(a:attrs)])
    endfunction
  End

  Before
    let Emitter = vital#vital#import('App.Emitter')
    let guard = Guard.store([Emitter, 0])
    call Emitter.unsubscribe()
    call Emitter.remove_middleware()
  End

  After
    if exists('guard')
      call guard.restore()
    endif
  End

  Describe .subscribe({name}, {listener} [, {instance}])
    It registers {lister} to subscribe {name} event
      let foo = deepcopy(listener)
      let bar = deepcopy(listener)
      call Emitter.subscribe('foo', foo.func, foo)
      call Emitter.subscribe('bar', foo.func, foo)
      call Emitter.subscribe('bar', bar.func, bar)

      Assert Equals(vars.listeners['foo'], [
            \ [foo.func, foo],
            \])
      Assert Equals(vars.listeners['bar'], [
            \ [foo.func, foo],
            \ [bar.func, bar],
            \])
    End
  End

  Describe .unsubscribe([{name} [, {listener} [, {instance}]]])
    It unregisters a {listener} of {name} event
      let foo = deepcopy(listener)
      let bar = deepcopy(listener)
      call Emitter.subscribe('foo', foo.func, foo)
      call Emitter.subscribe('bar', foo.func, foo)
      call Emitter.subscribe('bar', bar.func, bar)
      call Emitter.unsubscribe('bar', foo.func, foo)

      Assert Equals(vars.listeners['foo'], [
            \ [foo.func, foo],
            \])
      Assert Equals(vars.listeners['bar'], [
            \ [bar.func, bar],
            \])
    End

    It unregisters all listeners of {name} event
      let foo = deepcopy(listener)
      let bar = deepcopy(listener)
      call Emitter.subscribe('foo', foo.func, foo)
      call Emitter.subscribe('bar', foo.func, foo)
      call Emitter.subscribe('bar', bar.func, bar)
      call Emitter.unsubscribe('foo')

      Assert Equals(vars.listeners['foo'], [])
      Assert Equals(vars.listeners['bar'], [
            \ [foo.func, foo],
            \ [bar.func, bar],
            \])
    End

    It unregisters all listeners
      let foo = deepcopy(listener)
      let bar = deepcopy(listener)
      call Emitter.subscribe('foo', foo.func, foo)
      call Emitter.subscribe('bar', foo.func, foo)
      call Emitter.subscribe('bar', bar.func, bar)
      call Emitter.unsubscribe()

      Assert Equals(vars.listeners, {})
    End
  End

  Describe .add_middleware({middleware})
    It adds {middleware}
      let foo = deepcopy(middleware)
      let bar = deepcopy(middleware)
      call Emitter.add_middleware(foo)
      call Emitter.add_middleware(bar)
      Assert Equals(vars.middlewares, [foo, bar])
    End
  End

  Describe .remove_middleware([{middleware}])
    It removes {middleware}
      let foo = deepcopy(middleware)
      let bar = deepcopy(middleware)
      call Emitter.add_middleware(foo)
      call Emitter.add_middleware(bar)
      call Emitter.remove_middleware(foo)
      Assert Equals(vars.middlewares, [bar])
    End

    It removes all middlewares
      let foo = deepcopy(middleware)
      let bar = deepcopy(middleware)
      call Emitter.add_middleware(foo)
      call Emitter.add_middleware(bar)
      call Emitter.remove_middleware()
      Assert Equals(vars.middlewares, [])
    End
  End

  Describe .emit({name} [, {attr}...])
    It calls registered listerns of {name} with {attr}s
      let foo = deepcopy(listener)
      let bar = deepcopy(listener)
      call Emitter.subscribe('foo', foo.func, foo)
      call Emitter.subscribe('bar', foo.func, foo)
      call Emitter.subscribe('bar', bar.func, bar)

      call Emitter.emit('foo', 0, 1, 2)
      Assert Equals(foo.called_with, [0, 1, 2])
      Assert Equals(bar.called_with, [])

      call Emitter.emit('bar', 1, 1, 1)
      Assert Equals(foo.called_with, [1, 1, 1])
      Assert Equals(bar.called_with, [1, 1, 1])

      call Emitter.unsubscribe('bar', foo.func, foo)
      call Emitter.emit('bar', 2, 2, 2)
      Assert Equals(foo.called_with, [1, 1, 1])
      Assert Equals(bar.called_with, [2, 2, 2])
    End

    It calls callbacks of middlewares
      let foo = deepcopy(listener)
      let bar = deepcopy(listener)
      call Emitter.subscribe('foo', foo.func, foo)
      call Emitter.subscribe('bar', foo.func, foo)
      call Emitter.subscribe('bar', bar.func, bar)
      call Emitter.add_middleware(middleware)

      " Middleware removes first listeners/attrs
      call Emitter.emit('foo', 0, 1, 2)
      Assert Equals(foo.called_with, [], 'While middleware remove the fist one')
      Assert Equals(bar.called_with, [])

      " Middleware removes first listeners/attrs
      call Emitter.emit('bar', 1, 2, 3)
      Assert Equals(foo.called_with, [], 'While middleware remove the fist one')
      Assert Equals(bar.called_with, [2, 3])

      Assert Equals(middleware.on_emit_pre_called_with, [
            \ ['foo', 1, [0, 1, 2]],
            \ ['bar', 2, [1, 2, 3]],
            \])
      Assert Equals(middleware.on_emit_post_called_with, [
            \ ['foo', 0, [1, 2]],
            \ ['bar', 1, [2, 3]],
            \])
    End
  End
End
