Describe Error
  Before all
    function! Norm(messages) abort
      " it seems "Messages maintainer: ..." is not shown when Vim/Neovim in
      " a test docker image is used
      if empty(a:messages)
        return a:messages
      endif
      return a:messages[0] =~# '^Messages maintainer:'
            \ ? a:messages[1:]
            \ : a:messages
    endfunction
  End

  Before
    let Error = healthcheck#vital#import('Error')
    messages clear
  End

  After
    messages clear
  End

  Describe .plugin_name
    It is a plugin name
      Assert Equals(Error.plugin_name, 'vital')
    End
  End

  Describe .new()
    It returns an error instance
      let error = Error.new('This is an error')
      Assert KeyExists(error, 'exception')
      Assert KeyExists(error, 'throwpoint')
      Assert KeyExists(error, 'echo')
      Assert KeyExists(error, 'echomsg')
      Assert KeyExists(error, 'throw')
      Assert Equals(error.exception, 'This is an error')
      Assert Equals(error.throwpoint, '')
    End

    It returns an error instance with a throwpoint
      let error = Error.new(
            \ 'This is an error',
            \ 'This is a throwpoint',
            \)
      Assert Equals(error.exception, 'This is an error')
      Assert Equals(error.throwpoint, 'This is a throwpoint')
    End
  End

  Describe .from()
    It creates an error instance from an error like object
      let error = Error.from({ 'exception': 'This is an error like object' })
      Assert Equals(error.exception, 'This is an error like object')
      Assert Equals(error.throwpoint, '')

      let error = Error.from({
            \ 'exception': 'This is an error like object',
            \ 'throwpoint': 'This is a throwpoint'
            \})
      Assert Equals(error.exception, 'This is an error like object')
      Assert Equals(error.throwpoint, 'This is a throwpoint')
    End

    It creates an error instance from a string repl of an error instance
      let error = Error.new(
            \ 'This is an error message',
            \ 'This is a throwpoint',
            \)
      try
        call error.throw()
      catch
        let e = Error.from(v:exception)
      endtry
      Assert Equals(e.exception, 'This is an error message')
      Assert Equals(e.throwpoint, 'This is a throwpoint')
    End

    It creates an error instance from an error message
      let error = Error.from('This is a string error')
      Assert Equals(error.exception, 'This is a string error')
      Assert Equals(error.throwpoint, '')
    End

    It creates an error instance with a result of string()
      let error = Error.from({ 'foo': 'bar' })
      Assert Equals(error.exception, "{'foo': 'bar'}")
      Assert Equals(error.throwpoint, '')

      let error = Error.from(['foo', 'bar'])
      Assert Equals(error.exception, "['foo', 'bar']")
      Assert Equals(error.throwpoint, '')
    End
  End

  Describe .catch()
    It creates an error instance from a string repl of an error instance
      let error = Error.new(
            \ 'This is an error message',
            \ 'This is a throwpoint',
            \)
      try
        call error.throw()
      catch
        let e1 = Error.catch()
        let e2 = Error.catch(v:exception)
      endtry
      Assert Equals(e1.exception, 'This is an error message')
      Assert Equals(e1.throwpoint, 'This is a throwpoint')
      Assert Equals(e2.exception, 'This is an error message')
      Assert Equals(e2.throwpoint, 'This is a throwpoint')
    End

    It creates an error instance from v:exception and v:throwpoint
      try
        throw 'This is an error message'
      catch
        let error = Error.catch()
      endtry
      Assert Equals(error.exception, 'This is an error message')
      Assert Match(error.throwpoint, '^function ')
    End

    It creates an error instance from a given message and v:throwpoint
      try
        throw 'This is an error message'
      catch
        let error = Error.catch('Original message')
      endtry
      Assert Equals(error.exception, 'Original message')
      Assert Match(error.throwpoint, '^function ')
    End

    It throws an exception when v:exception is not available and no message is given
      Throw /Error\.catch() must be called in/ Error.catch()
    End
  End

  Describe error instance
    Describe .echo()
      It echo an exception message of an error instance
        let error = Error.new(
              \ 'This is an error message',
              \)
        let r = split(execute('call error.echo()', ''), '\n')
        Assert Equals(r, [
              \ '[vital] This is an error message',
              \])
        let r = split(execute('messages', ''), '\n')
        Assert Equals(Norm(r), [])
      End

      It echo an exception message and a throwpoint of an error instance
        let error = Error.new(
              \ 'This is an error message',
              \ "This is a throwpoint\nSecond line\nThird line",
              \)
        let r = split(execute('call error.echo()', ''), '\n')
        Assert Equals(r, [
              \ '[vital] This is an error message',
              \ 'This is a throwpoint',
              \ 'Second line',
              \ 'Third line',
              \])
        let r = split(execute('messages', ''), '\n')
        Assert Equals(Norm(r), [])
      End
    End

    Describe .echomsg()
      It echo an exception message of an error instance and write in a message-history
        let error = Error.new(
              \ 'This is an error message',
              \)
        let r = split(execute('call error.echomsg()', ''), '\n')
        Assert Equals(r, [
              \ '[vital] This is an error message',
              \])
        let r = split(execute('messages', ''), '\n')
        Assert Equals(Norm(r), [
              \ '[vital] This is an error message',
              \])
      End

      It echo an exception message and a throwpoint of an error instance (echomsg)
        let error = Error.new(
              \ 'This is an error message',
              \ "This is a throwpoint\nSecond line\nThird line",
              \)
        let r = split(execute('call error.echomsg()', ''), '\n')
        Assert Equals(r, [
              \ '[vital] This is an error message',
              \ 'This is a throwpoint',
              \ 'Second line',
              \ 'Third line',
              \])
        let r = split(execute('messages', ''), '\n')
        Assert Equals(Norm(r), [
              \ '[vital] This is an error message',
              \ 'This is a throwpoint',
              \ 'Second line',
              \ 'Third line',
              \])
      End
    End

    Describe .throw()
      It throws a string repl of an error instance
        let error = Error.new(
              \ 'This is an error message',
              \)
        try
          call error.throw()
        catch
          let e = Error.catch()
        endtry
        Assert Equals(e.exception, 'This is an error message')
        Assert Equals(e.throwpoint, '')
      End
    End
  End
End

