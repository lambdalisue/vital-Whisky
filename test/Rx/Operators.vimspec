Describe Rx.Operators
  Before all
    let TIMEOUT = (!empty($APPVEYOR) || !empty($TRAVIS)) ? 5000 : 500

    let Promise = vital#vital#import('Async.Promise')
    let BufferObserver = vital#vital#import('Rx.Test.BufferObserver')
  End

  Before
    let Observable = healthcheck#vital#import('Rx.Observable')
    let Operators = healthcheck#vital#import('Rx.Operators')
  End

  Describe .catch_error()
    It continues with a different Observable when there's an error
      let o = Observable.concat(
            \ Observable.of(1, 2, 3),
            \ Observable.throw_error('This is an error'),
            \ Observable.of(4, 5, 6),
            \)
      let o = o.pipe(
            \ Operators.catch_error({ e -> Observable.of('Get', e) }),
            \ Operators.take(10),
            \)
      let rs1 = []
      let rs2 = []
      let es1 = []
      let es2 = []
      Assert False(Observable.wait(o.subscribe({
            \ 'next': { v -> add(rs1, v) },
            \ 'error': { e -> add(es1, e) },
            \}), TIMEOUT))
      Assert Equals(rs1, [1, 2, 3, 'Get', 'This is an error'])
      Assert Equals(es1, [])
      Assert Equals(rs2, [])
      Assert Equals(es2, [])

      Assert False(Observable.wait(o.subscribe({
            \ 'next': { v -> add(rs2, v) },
            \ 'error': { e -> add(es2, e) },
            \}), TIMEOUT))
      Assert Equals(rs1, [1, 2, 3, 'Get', 'This is an error'])
      Assert Equals(es1, [])
      Assert Equals(rs2, [1, 2, 3, 'Get', 'This is an error'])
      Assert Equals(es2, [])
    End

    It retries the caught source Observable again in case of error
      let o = Observable.concat(
            \ Observable.of(1, 2, 3),
            \ Observable.throw_error('This is an error'),
            \ Observable.of(4, 5, 6),
            \)
      let o = o.pipe(
            \ Operators.catch_error({ _, c -> c }),
            \ Operators.take(10),
            \)
      let rs1 = []
      let rs2 = []
      let es1 = []
      let es2 = []
      Assert False(Observable.wait(o.subscribe({
            \ 'next': { v -> add(rs1, v) },
            \ 'error': { e -> add(es1, e) },
            \}), TIMEOUT))
      Assert Equals(rs1, [1, 2, 3, 1, 2, 3, 1, 2, 3, 1])
      Assert Equals(es1, [])
      Assert Equals(rs2, [])
      Assert Equals(es2, [])

      Assert False(Observable.wait(o.subscribe({
            \ 'next': { v -> add(rs2, v) },
            \ 'error': { e -> add(es2, e) },
            \}), TIMEOUT))
      Assert Equals(rs1, [1, 2, 3, 1, 2, 3, 1, 2, 3, 1])
      Assert Equals(es1, [])
      Assert Equals(rs2, [1, 2, 3, 1, 2, 3, 1, 2, 3, 1])
      Assert Equals(es2, [])
    End

    It throws a new error when the source Observable throws an error
      let o = Observable.concat(
            \ Observable.of(1, 2, 3),
            \ Observable.throw_error('This is an error'),
            \ Observable.of(4, 5, 6),
            \)
      let o = o.pipe(
            \ Operators.catch_error({ -> execute('throw "Hi"', '') }),
            \ Operators.take(10),
            \)
      let rs1 = []
      let rs2 = []
      let es1 = []
      let es2 = []
      Assert False(Observable.wait(o.subscribe({
            \ 'next': { v -> add(rs1, v) },
            \ 'error': { e -> add(es1, e) },
            \}), TIMEOUT))
      Assert Equals(rs1, [1, 2, 3])
      Assert Equals(map(copy(es1), { _, v -> v.exception }), ['Hi'])
      Assert Equals(rs2, [])
      Assert Equals(es2, [])

      Assert False(Observable.wait(o.subscribe({
            \ 'next': { v -> add(rs2, v) },
            \ 'error': { e -> add(es2, e) },
            \}), TIMEOUT))
      Assert Equals(rs1, [1, 2, 3])
      Assert Equals(map(copy(es1), { _, v -> v.exception }), ['Hi'])
      Assert Equals(rs2, [1, 2, 3])
      Assert Equals(map(copy(es2), { _, v -> v.exception }), ['Hi'])
    End
  End

  Describe .concat_map()
    It maps values and emits results using the supplied callback (array)
      let o = Observable.of('a', 'b', 'c').pipe(
            \ Operators.concat_map({ x -> map([0, 1, 2], { _, y -> [x, y] }) }),
            \)
      let rs = []
      Assert False(Observable.wait(o.subscribe({ v -> add(rs, v) }), TIMEOUT))
      Assert Equals(rs, [
            \ ['a', 0],
            \ ['a', 1],
            \ ['a', 2],
            \ ['b', 0],
            \ ['b', 1],
            \ ['b', 2],
            \ ['c', 0],
            \ ['c', 1],
            \ ['c', 2],
            \])
    End

    It maps values and emits results using the supplied callback (observable)
      let o = Observable.of('a', 'b', 'c').pipe(
            \ Operators.concat_map({ x -> Observable.interval(10).pipe(
            \   Operators.map({ i -> [x, i] }),
            \   Operators.take(3),
            \ ) }),
            \)
      let rs = []
      Assert False(Observable.wait(o.subscribe({ v -> add(rs, v) }), TIMEOUT))
      Assert Equals(rs, [
            \ ['a', 0],
            \ ['a', 1],
            \ ['a', 2],
            \ ['b', 0],
            \ ['b', 1],
            \ ['b', 2],
            \ ['c', 0],
            \ ['c', 1],
            \ ['c', 2],
            \])
    End

    It maps values and emits in favor of order
      if !empty($APPVEYOR) || !empty($TRAVIS)
        let ts = [500, 300, 100, 5000]
      else
        let ts = [50, 30, 10, 500]
      endif

      let o = Observable.of(
            \ { 'url': 'http://foo', 'delay': ts[0] },
            \ { 'url': 'http://bar', 'delay': ts[1] },
            \ { 'url': 'http://baz', 'delay': ts[2] },
            \)
      let o = o.pipe(
            \   Operators.concat_map({ v -> Promise.new({ r -> timer_start(v.delay, { -> r(v.url) }) }) }),
            \)

      let rs1 = []
      let rs2 = []
      Assert False(Observable.wait(o.subscribe({ v -> add(rs1, v) }), {
            \ 'interval': 1,
            \ 'timeout': ts[3],
            \}))
      Assert Equals(rs1, [
            \ 'http://foo',
            \ 'http://bar',
            \ 'http://baz',
            \])
      Assert Equals(rs2, [])

      Assert False(Observable.wait(o.subscribe({ v -> add(rs2, v) }), {
            \ 'interval': 1,
            \ 'timeout': ts[3],
            \}))
      Assert Equals(rs1, [
            \ 'http://foo',
            \ 'http://bar',
            \ 'http://baz',
            \])
      Assert Equals(rs2, [
            \ 'http://foo',
            \ 'http://bar',
            \ 'http://baz',
            \])
    End
  End

  Describe .delay()
    It delay emitted values by given time
      if !empty($APPVEYOR) || !empty($TRAVIS)
        let ts = [500, 1000]
      else
        let ts = [50, 100]
      endif

      let o = Observable.of(1, 2, 3, 4, 5, 6, 7, 8, 9).pipe(
           \ Operators.delay(ts[0]),
           \)
      let rs1 = []
      let rs2 = []

      let start = reltime()
      let s = o.subscribe({ v -> add(rs1, v) })
      Assert True(Observable.wait(s, { 'interval': 1, 'timeout': 0 }))
      Assert Equals(rs1, [])
      Assert Equals(rs2, [])
      Assert False(Observable.wait(s, { 'interval': 1, 'timeout': ts[1] }))
      Assert Equals(rs1, [1, 2, 3, 4, 5, 6, 7, 8, 9])
      Assert Equals(rs2, [])
      Assert Approx(reltimefloat(reltime(start)) * 1000, ts[0])

      let start = reltime()
      let s = o.subscribe({ v -> add(rs2, v) })
      Assert True(Observable.wait(s, { 'interval': 1, 'timeout': 0 }))
      Assert Equals(rs1, [1, 2, 3, 4, 5, 6, 7, 8, 9])
      Assert Equals(rs2, [])
      Assert False(Observable.wait(s, { 'interval': 1, 'timeout': ts[1] }))
      Assert Equals(rs1, [1, 2, 3, 4, 5, 6, 7, 8, 9])
      Assert Equals(rs2, [1, 2, 3, 4, 5, 6, 7, 8, 9])
      Assert Approx(reltimefloat(reltime(start)) * 1000, ts[0])
    End
  End

  Describe .default_if_empty()
    It emit given value if nothing is emitted before completion
      let o = Observable.empty().pipe(
           \ Operators.default_if_empty('Default value'),
           \)
      let rs1 = []
      let rs2 = []
      Assert False(Observable.wait(o.subscribe({ v -> add(rs1, v) }), TIMEOUT))
      Assert Equals(rs1, ['Default value'])
      Assert Equals(rs2, [])

      Assert False(Observable.wait(o.subscribe({ v -> add(rs2, v) }), TIMEOUT))
      Assert Equals(rs1, ['Default value'])
      Assert Equals(rs2, ['Default value'])
    End

    It does nothing if value is emitted
      let o = Observable.of('Non default value').pipe(
           \ Operators.default_if_empty('Default value'),
           \)
      let rs1 = []
      let rs2 = []
      Assert False(Observable.wait(o.subscribe({ v -> add(rs1, v) }), TIMEOUT))
      Assert Equals(rs1, ['Non default value'])
      Assert Equals(rs2, [])

      Assert False(Observable.wait(o.subscribe({ v -> add(rs2, v) }), TIMEOUT))
      Assert Equals(rs1, ['Non default value'])
      Assert Equals(rs2, ['Non default value'])
    End
  End

  Describe .first()
    It emits first value from sequence
      let o = Observable.of(1, 1, 2, 3, 5, 8)
            \.pipe(Operators.first())
      let rs1 = []
      let rs2 = []
      Assert False(Observable.wait(o.subscribe({ v -> add(rs1, v) }), TIMEOUT))
      Assert Equals(rs1, [1])
      Assert Equals(rs2, [])
      Assert False(Observable.wait(o.subscribe({ v -> add(rs2, v) }), TIMEOUT))
      Assert Equals(rs1, [1])
      Assert Equals(rs2, [1])
    End

    It emits first value to pass predicate from sequence
      let o = Observable.of(1, 1, 2, 3, 5, 8)
            \.pipe(Operators.first({ v -> v % 3 is# 0 }))
      let rs1 = []
      let rs2 = []
      Assert False(Observable.wait(o.subscribe({ v -> add(rs1, v) }), TIMEOUT))
      Assert Equals(rs1, [3])
      Assert Equals(rs2, [])
      Assert False(Observable.wait(o.subscribe({ v -> add(rs2, v) }), TIMEOUT))
      Assert Equals(rs1, [3])
      Assert Equals(rs2, [3])
    End

    It utilizing default value
      let o = Observable.of(1, 1, 2, 3, 5, 8)
            \.pipe(Operators.first({ v -> v > 10 }, 'Hello'))
      let rs1 = []
      let rs2 = []
      Assert False(Observable.wait(o.subscribe({ v -> add(rs1, v) }), TIMEOUT))
      Assert Equals(rs1, ['Hello'])
      Assert Equals(rs2, [])
      Assert False(Observable.wait(o.subscribe({ v -> add(rs2, v) }), TIMEOUT))
      Assert Equals(rs1, ['Hello'])
      Assert Equals(rs2, ['Hello'])
    End
  End

  Describe .filter()
    It filters each values via given function
      let o = Observable.of(1, 1, 2, 3, 5, 8)
            \.pipe(Operators.filter({ v -> v % 2 is 0 }))
      let rs1 = []
      let rs2 = []
      Assert False(Observable.wait(o.subscribe({ v -> add(rs1, v) }), TIMEOUT))
      Assert Equals(rs1, [2, 8])
      Assert Equals(rs2, [])
      Assert False(Observable.wait(o.subscribe({ v -> add(rs2, v) }), TIMEOUT))
      Assert Equals(rs1, [2, 8])
      Assert Equals(rs2, [2, 8])
    End

    It gives an item index as a second argument
      let rs = []
      let o = Observable.of(1, 1, 2, 3, 5, 8)
            \.pipe(Operators.filter({ _, i -> empty(add(rs, i)) }))
      Assert False(Observable.wait(o.subscribe({ -> 0 }), TIMEOUT))
      Assert Equals(rs, [0, 1, 2, 3, 4, 5])
    End
  End

  Describe .identity()
    It does nothing
      let o = Observable.of(1, 1, 2, 3, 5, 8).pipe(
            \ Operators.identity(),
            \)
      let rs1 = []
      let rs2 = []
      Assert False(Observable.wait(o.subscribe({ v -> add(rs1, v) }), TIMEOUT))
      Assert Equals(rs1, [1, 1, 2, 3, 5, 8])
      Assert Equals(rs2, [])
      Assert False(Observable.wait(o.subscribe({ v -> add(rs2, v) }), TIMEOUT))
      Assert Equals(rs1, [1, 1, 2, 3, 5, 8])
      Assert Equals(rs2, [1, 1, 2, 3, 5, 8])
    End
  End

  Describe .ignore_elements()
    It ignores everything but complete and error (complete)
      let o = Observable.of(1, 1, 2, 3, 5, 8).pipe(
            \ Operators.ignore_elements(),
            \)
      let rs1 = []
      let rs2 = []
      Assert False(Observable.wait(o.subscribe({ v -> add(rs1, v) }), TIMEOUT))
      Assert Equals(rs1, [])
      Assert Equals(rs2, [])
      Assert False(Observable.wait(o.subscribe({ v -> add(rs2, v) }), TIMEOUT))
      Assert Equals(rs1, [])
      Assert Equals(rs2, [])
    End

    It ignores everything but complete and error (error)
      let o = Observable.throw_error('Hello').pipe(
            \ Operators.ignore_elements(),
            \)
      let rs1 = []
      let rs2 = []
      Assert False(Observable.wait(o.subscribe({ 'error': { v -> add(rs1, v) } }), TIMEOUT))
      Assert Equals(rs1, ['Hello'])
      Assert Equals(rs2, [])
      Assert False(Observable.wait(o.subscribe({ 'error': { v -> add(rs2, v) } }), TIMEOUT))
      Assert Equals(rs1, ['Hello'])
      Assert Equals(rs2, ['Hello'])
    End
  End

  Describe .map()
    It modifies each values via given function
      let o = Observable.of(1, 1, 2, 3, 5, 8)
            \.pipe(Operators.map({ v -> v * 2 }))
      let rs1 = []
      let rs2 = []
      Assert False(Observable.wait(o.subscribe({ v -> add(rs1, v) }), TIMEOUT))
      Assert Equals(rs1, [2, 2, 4, 6, 10, 16])
      Assert Equals(rs2, [])
      Assert False(Observable.wait(o.subscribe({ v -> add(rs2, v) }), TIMEOUT))
      Assert Equals(rs1, [2, 2, 4, 6, 10, 16])
      Assert Equals(rs2, [2, 2, 4, 6, 10, 16])
    End

    It gives an item index as a second argument
      let rs = []
      let o = Observable.of(1, 1, 2, 3, 5, 8)
            \.pipe(Operators.map({ _, i -> empty(add(rs, i)) }))
      Assert False(Observable.wait(o.subscribe({ -> 0 }), TIMEOUT))
      Assert Equals(rs, [0, 1, 2, 3, 4, 5])
    End
  End

  Describe .merge_map()
    It maps values and emits results using the supplied callback (array)
      let o = Observable.of('a', 'b', 'c').pipe(
            \ Operators.merge_map({ x -> map([0, 1, 2], { _, y -> [x, y] }) }),
            \)
      let rs = []
      Assert False(Observable.wait(o.subscribe({ v -> add(rs, v) }), TIMEOUT))
      Assert Equals(sort(rs), [
            \ ['a', 0],
            \ ['a', 1],
            \ ['a', 2],
            \ ['b', 0],
            \ ['b', 1],
            \ ['b', 2],
            \ ['c', 0],
            \ ['c', 1],
            \ ['c', 2],
            \])
    End

    It maps values and emits results using the supplied callback (observable)
      let o = Observable.of('a', 'b', 'c').pipe(
            \ Operators.merge_map({ x -> Observable.interval(10).pipe(
            \   Operators.map({ i -> [x, i] }),
            \   Operators.take(3),
            \ ) }),
            \)
      let rs = []
      Assert False(Observable.wait(o.subscribe({ v -> add(rs, v) }), TIMEOUT))
      Assert Equals(sort(rs), [
            \ ['a', 0],
            \ ['a', 1],
            \ ['a', 2],
            \ ['b', 0],
            \ ['b', 1],
            \ ['b', 2],
            \ ['c', 0],
            \ ['c', 1],
            \ ['c', 2],
            \])
    End

    It maps values and emits in favor of through-put
      if !empty($APPVEYOR) || !empty($TRAVIS)
        let ts = [500, 300, 100, 5000]
      else
        let ts = [50, 30, 10, 500]
      endif

      let o = Observable.of(
            \ { 'url': 'http://foo', 'delay': ts[0] },
            \ { 'url': 'http://bar', 'delay': ts[1] },
            \ { 'url': 'http://baz', 'delay': ts[2] },
            \)
      let o = o.pipe(
            \   Operators.merge_map({ v -> Promise.new({ r -> timer_start(v.delay, { -> r(v.url) }) }) }),
            \)

      let rs1 = []
      let rs2 = []
      Assert False(Observable.wait(o.subscribe({ v -> add(rs1, v) }), {
            \ 'interval': 1,
            \ 'timeout': ts[3],
            \}))
      Assert Equals(rs1, [
            \ 'http://baz',
            \ 'http://bar',
            \ 'http://foo',
            \])
      Assert Equals(rs2, [])

      Assert False(Observable.wait(o.subscribe({ v -> add(rs2, v) }), {
            \ 'interval': 1,
            \ 'timeout': ts[3],
            \}))
      Assert Equals(rs1, [
            \ 'http://baz',
            \ 'http://bar',
            \ 'http://foo',
            \])
      Assert Equals(rs2, [
            \ 'http://baz',
            \ 'http://bar',
            \ 'http://foo',
            \])
    End
  End

  Describe .multicast()
    Before
      let Subject = healthcheck#vital#import('Rx.Subject')
      let ReplaySubject = healthcheck#vital#import('Rx.ReplaySubject')
    End

    It should mirror a simple source Observable
      let source = Observable.of(1, 2, 3, 4, 5)
      let multi = source.pipe(
            \ Operators.multicast(),
            \)
      let results = []
      call multi.subscribe({v -> add(results, v)})
      Assert Equals(Observable.wait(multi.connect(), TIMEOUT), 0)
      Assert Equals(results, [1, 2, 3, 4, 5])
    End

    It should accept Subject factory functions
      let source = Observable.of(1, 2, 3, 4, 5)
      let multi = source.pipe(
            \ Operators.multicast({ -> Subject.new() }),
            \)
      let results = []
      call multi.subscribe({v -> add(results, v)})
      Assert Equals(Observable.wait(multi.connect(), TIMEOUT), 0)
      Assert Equals(results, [1, 2, 3, 4, 5])
    End

    It should accept Subjects
      let source = Observable.of(1, 2, 3, 4, 5)
      let multi = source.pipe(
            \ Operators.multicast(Subject.new()),
            \)
      let results = []
      call multi.subscribe({v -> add(results, v)})
      Assert Equals(Observable.wait(multi.connect(), TIMEOUT), 0)
      Assert Equals(results, [1, 2, 3, 4, 5])
    End

    It should multicast a ConnectableObservable
      let source = Subject.new()
      let connectable = source.pipe(
            \ Operators.multicast(Subject.new()),
            \)
      let replayed = source.pipe(
            \ Operators.multicast(ReplaySubject.new()),
            \)
      let rs1 = []
      let rs2 = []

      call connectable.connect()
      call replayed.connect()

      call source.next(1)
      call source.next(2)
      call connectable.subscribe({v -> add(rs1, v)})
      call replayed.subscribe({v -> add(rs2, v)})
      call source.next(3)
      call source.next(4)
      call source.complete()

      Assert Equals(rs1, [3, 4])
      Assert Equals(rs2, [1, 2, 3, 4])
    End

    It should accept a multicast selector and connect to a hot source for each subscriber
      let source = Subject.new()
      let connectable = source.pipe(
            \ Operators.multicast(Subject.new()),
            \)
      let replayed = source.pipe(
            \ Operators.multicast(ReplaySubject.new()),
            \)
      let rs1 = []
      let rs2 = []

      call connectable.connect()
      call replayed.connect()

      call source.next(1)
      call source.next(2)
      call connectable.subscribe({v -> add(rs1, v)})
      call replayed.subscribe({v -> add(rs2, v)})
      call source.next(3)
      call source.next(4)
      call source.complete()

      Assert Equals(rs1, [3, 4])
      Assert Equals(rs2, [1, 2, 3, 4])
    End

    It multicast with standard Subject
      if !empty($APPVEYOR) || !empty($TRAVIS)
        let ts = [100, 1000]
      else
        let ts = [10, 100]
      endif

      let results = []
      let source = Observable.interval(ts[0]).pipe(Operators.take(5))
      let example = source.pipe(
            \ Operators.tap({ -> add(results, 'side-effect') }),
            \ Operators.map({ -> 'Result!' }),
            \)
      let multi = example.pipe(
            \ Operators.multicast({ -> Subject.new() })
            \)
      let s1 = multi.subscribe({ v -> add(results, 'sub1:' . v) })
      let s2 = multi.subscribe({ v -> add(results, 'sub2:' . v) })
      let s = multi.connect()
      Assert False(Observable.wait(s, {
            \ 'interval': 1,
            \ 'timeout': ts[1],
            \}))
      Assert Equals(results, [
            \ 'side-effect',
            \ 'sub1:Result!', 'sub2:Result!',
            \ 'side-effect',
            \ 'sub1:Result!', 'sub2:Result!',
            \ 'side-effect',
            \ 'sub1:Result!', 'sub2:Result!',
            \ 'side-effect',
            \ 'sub1:Result!', 'sub2:Result!',
            \ 'side-effect',
            \ 'sub1:Result!', 'sub2:Result!',
            \])
    End
  End

  Describe .reduce()
    It reduces each values via given function
      let o = Observable.of(1, 1, 2, 3, 5, 8)
            \.pipe(Operators.reduce({ a, v -> a * v }))

      let rs1 = []
      let rs2 = []
      Assert False(Observable.wait(o.subscribe({ v -> add(rs1, v) }), TIMEOUT))
      Assert Equals(rs1, [1 * 1 * 2 * 3 * 5 * 8])
      Assert Equals(rs2, [])

      Assert False(Observable.wait(o.subscribe({ v -> add(rs2, v) }), TIMEOUT))
      Assert Equals(rs1, [1 * 1 * 2 * 3 * 5 * 8])
      Assert Equals(rs2, [1 * 1 * 2 * 3 * 5 * 8])
    End

    It reduces each values via given function and seed
      let o = Observable.of(1, 1, 2, 3, 5, 8)
            \.pipe(Operators.reduce({ a, v -> a * v }, 10))

      let rs1 = []
      let rs2 = []
      Assert False(Observable.wait(o.subscribe({ v -> add(rs1, v) }), TIMEOUT))
      Assert Equals(rs1, [10 * 1 * 1 * 2 * 3 * 5 * 8])
      Assert Equals(rs2, [])

      Assert False(Observable.wait(o.subscribe({ v -> add(rs2, v) }), TIMEOUT))
      Assert Equals(rs1, [10 * 1 * 1 * 2 * 3 * 5 * 8])
      Assert Equals(rs2, [10 * 1 * 1 * 2 * 3 * 5 * 8])
    End
  End

  Describe .scan()
    It scans each values via given function
      let o = Observable.of(1, 1, 2, 3, 5, 8)
            \.pipe(Operators.scan({ a, v -> a * v }))

      let rs1 = []
      let rs2 = []
      Assert False(Observable.wait(o.subscribe({ v -> add(rs1, v) }), TIMEOUT))
      Assert Equals(rs1, [1, 1, 2, 6, 30, 240])
      Assert Equals(rs2, [])

      Assert False(Observable.wait(o.subscribe({ v -> add(rs2, v) }), TIMEOUT))
      Assert Equals(rs1, [1, 1, 2, 6, 30, 240])
      Assert Equals(rs2, [1, 1, 2, 6, 30, 240])
    End

    It scans each values via given function and seed
      let o = Observable.of(1, 1, 2, 3, 5, 8)
            \.pipe(Operators.scan({ a, v -> a * v }, 10))

      let rs1 = []
      let rs2 = []
      Assert False(Observable.wait(o.subscribe({ v -> add(rs1, v) }), TIMEOUT))
      Assert Equals(rs1, [10, 10, 20, 60, 300, 2400])
      Assert Equals(rs2, [])

      Assert False(Observable.wait(o.subscribe({ v -> add(rs2, v) }), TIMEOUT))
      Assert Equals(rs1, [10, 10, 20, 60, 300, 2400])
      Assert Equals(rs2, [10, 10, 20, 60, 300, 2400])
    End
  End

  Describe .start_with()
    It emits given value first
      let o = Observable.of(5, 6, 7, 8, 9)
            \.pipe(Operators.start_with(0))
      let rs1 = []
      let rs2 = []
      Assert False(Observable.wait(o.subscribe({ v -> add(rs1, v) }), TIMEOUT))
      Assert Equals(rs1, [0, 5, 6, 7, 8, 9])
      Assert Equals(rs2, [])
      Assert False(Observable.wait(o.subscribe({ v -> add(rs2, v) }), TIMEOUT))
      Assert Equals(rs1, [0, 5, 6, 7, 8, 9])
      Assert Equals(rs2, [0, 5, 6, 7, 8, 9])
    End

    It emits given values first
      let o = Observable.of(5, 6, 7, 8, 9)
            \.pipe(Operators.start_with(0, 1, 2, 3, 4))
      let rs1 = []
      let rs2 = []
      Assert False(Observable.wait(o.subscribe({ v -> add(rs1, v) }), TIMEOUT))
      Assert Equals(rs1, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
      Assert Equals(rs2, [])
      Assert False(Observable.wait(o.subscribe({ v -> add(rs2, v) }), TIMEOUT))
      Assert Equals(rs1, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
      Assert Equals(rs2, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
    End
  End

  Describe .skip()
    It emits provided number of values before completing
      let o = Observable.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
            \.pipe(Operators.skip(5))
      let rs1 = []
      let rs2 = []
      Assert False(Observable.wait(o.subscribe({ v -> add(rs1, v) }), TIMEOUT))
      Assert Equals(rs1, [5, 6, 7, 8, 9])
      Assert Equals(rs2, [])
      Assert False(Observable.wait(o.subscribe({ v -> add(rs2, v) }), TIMEOUT))
      Assert Equals(rs1, [5, 6, 7, 8, 9])
      Assert Equals(rs2, [5, 6, 7, 8, 9])
    End

    It throws an exception when count is negative
      Throw /invalid count/ Operators.take(-1)
    End
  End

  Describe .skip_until()
    It emits until provided observable emits [time-consuming]
      if !empty($APPVEYOR) || !empty($TRAVIS)
        let ts = [1000, 5100, 20000]
      else
        let ts = [100, 510, 2000]
      endif

      let o = Observable.interval(ts[0]).pipe(
            \ Operators.skip_until(Observable.timer(ts[1])),
            \ Operators.take(5),
            \)
      let rs1 = []
      let rs2 = []
      Assert False(Observable.wait(o.subscribe({ v -> add(rs1, v) }), {
            \ 'interval': 1,
            \ 'timeout': ts[2],
            \}))
      Assert Equals(rs1, [5, 6, 7, 8, 9])
      Assert Equals(rs2, [])
      Assert False(Observable.wait(o.subscribe({ v -> add(rs2, v) }), {
            \ 'interval': 1,
            \ 'timeout': ts[2],
            \}))
      Assert Equals(rs1, [5, 6, 7, 8, 9])
      Assert Equals(rs2, [5, 6, 7, 8, 9])
    End
  End

  Describe .switch_map()
    It maps values and emits results using the supplied callback (array)
      let o = Observable.of('a', 'b', 'c').pipe(
            \ Operators.switch_map({ x -> map([0, 1, 2], { _, y -> [x, y] }) }),
            \)
      let rs = []
      Assert False(Observable.wait(o.subscribe({ v -> add(rs, v) }), TIMEOUT))
      Assert Equals(rs, [
            \ ['c', 0],
            \ ['c', 1],
            \ ['c', 2],
            \])
    End

    It maps values and emits results using the supplied callback (observable)
      let o = Observable.of('a', 'b', 'c').pipe(
            \ Operators.switch_map({ x -> Observable.interval(10).pipe(
            \   Operators.map({ i -> [x, i] }),
            \   Operators.take(3),
            \ ) }),
            \)
      let rs = []
      Assert False(Observable.wait(o.subscribe({ v -> add(rs, v) }), TIMEOUT))
      Assert Equals(rs, [
            \ ['c', 0],
            \ ['c', 1],
            \ ['c', 2],
            \])
    End

    It maps values and emits in favor of order
      let o = Observable.of(
            \ { 'url': 'http://foo', 'delay': 500 },
            \ { 'url': 'http://bar', 'delay': 300 },
            \ { 'url': 'http://baz', 'delay': 100 },
            \).pipe(
            \   Operators.switch_map({ v -> Promise.new({ r -> timer_start(v.delay, { -> r(v.url) }) }) }),
            \)

      let rs1 = []
      let rs2 = []
      Assert False(Observable.wait(o.subscribe({ v -> add(rs1, v) }), TIMEOUT))
      Assert Equals(rs1, [
            \ 'http://baz',
            \])
      Assert Equals(rs2, [])

      Assert False(Observable.wait(o.subscribe({ v -> add(rs2, v) }), TIMEOUT))
      Assert Equals(rs1, [
            \ 'http://baz',
            \])
      Assert Equals(rs2, [
            \ 'http://baz',
            \])
    End
  End

  Describe .take()
    It emits provided number of values before completing
      let o = Observable.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
            \.pipe(Operators.take(5))
      let rs1 = []
      let rs2 = []
      Assert False(Observable.wait(o.subscribe({ v -> add(rs1, v) }), TIMEOUT))
      Assert Equals(rs1, [0, 1, 2, 3, 4])
      Assert Equals(rs2, [])
      Assert False(Observable.wait(o.subscribe({ v -> add(rs2, v) }), TIMEOUT))
      Assert Equals(rs1, [0, 1, 2, 3, 4])
      Assert Equals(rs2, [0, 1, 2, 3, 4])
    End

    It throws an exception when count is negative
      Throw /invalid count/ Operators.take(-1)
    End
  End

  Describe .take_until()
    It emits until provided observable emits [time-consuming]
      if !empty($APPVEYOR) || !empty($TRAVIS)
        let ts = [1000, 5100, 20000]
      else
        let ts = [100, 510, 2000]
      endif

      let o = Observable.interval(ts[0])
            \.pipe(Operators.take_until(Observable.timer(ts[1])))
      let rs1 = []
      let rs2 = []
      Assert False(Observable.wait(o.subscribe({ v -> add(rs1, v) }), {
            \ 'interval': 1,
            \ 'timeout': ts[2],
            \}))
      Assert Equals(rs1, [0, 1, 2, 3, 4])
      Assert Equals(rs2, [])
      Assert False(Observable.wait(o.subscribe({ v -> add(rs2, v) }), {
            \ 'interval': 1,
            \ 'timeout': ts[2],
            \}))
      Assert Equals(rs1, [0, 1, 2, 3, 4])
      Assert Equals(rs2, [0, 1, 2, 3, 4])
    End
  End

  Describe .tap()
    It calls a given function with each values
      let rs1 = []
      let rs2 = []
      let o = Observable.of(1, 1, 2, 3, 5, 8).pipe(
            \ Operators.tap({ v -> add(rs1, v) }),
            \ Operators.map({ v -> v * 2 }),
            \ Operators.tap({ v -> add(rs2, v) }),
            \)

      Assert False(Observable.wait(o.subscribe(), TIMEOUT))
      Assert Equals(rs1, [1, 1, 2, 3, 5, 8])
      Assert Equals(rs2, [2, 2, 4, 6, 10, 16])

      Assert False(Observable.wait(o.subscribe(), TIMEOUT))
      Assert Equals(rs1, repeat([1, 1, 2, 3, 5, 8], 2))
      Assert Equals(rs2, repeat([2, 2, 4, 6, 10, 16], 2))
    End
  End

  Describe .throw_if_empty()
    It throw error if nothing is emitted before completion
      let o = Observable.empty().pipe(
           \ Operators.throw_if_empty({ -> 'Hi error' }),
           \)
      let rs1 = []
      let rs2 = []
      Assert False(Observable.wait(o.subscribe({ 'error': { v -> add(rs1, v) } }), TIMEOUT))
      Assert Equals(map(copy(rs1), { _, v -> v.exception }), ['Hi error'])
      Assert Equals(rs2, [])

      Assert False(Observable.wait(o.subscribe({ 'error': { v -> add(rs2, v) } }), TIMEOUT))
      Assert Equals(map(copy(rs1), { _, v -> v.exception }), ['Hi error'])
      Assert Equals(map(copy(rs2), { _, v -> v.exception }), ['Hi error'])
    End

    It does nothing if value is emitted
      let o = Observable.of('Non default value').pipe(
           \ Operators.throw_if_empty({ -> 'Hi Error' }),
           \)
      let rs1 = []
      let rs2 = []
      Assert False(Observable.wait(o.subscribe({ v -> add(rs1, v) }), TIMEOUT))
      Assert Equals(rs1, ['Non default value'])
      Assert Equals(rs2, [])

      Assert False(Observable.wait(o.subscribe({ v -> add(rs2, v) }), TIMEOUT))
      Assert Equals(rs1, ['Non default value'])
      Assert Equals(rs2, ['Non default value'])
    End
  End

  Describe .timeout()
    It returns an observable which error if no value is emitted before specified duration
      let rs1 = []
      let rs2 = []
      let o = Observable.never().pipe(
            \ Operators.timeout(100),
            \)

      Assert False(Observable.wait(o.subscribe({ 'error': { e -> add(rs1, e) } }), TIMEOUT))
      Assert Equals(rs1, ['vital: Rx.Operators: Timeout error'])
      Assert Equals(rs2, [])

      Assert False(Observable.wait(o.subscribe({ 'error': { e -> add(rs2, e) } }), TIMEOUT))
      Assert Equals(rs1, ['vital: Rx.Operators: Timeout error'])
      Assert Equals(rs2, ['vital: Rx.Operators: Timeout error'])
    End

    It returns values if the first value has emitted before specified duration
      let rs1 = []
      let rs2 = []
      let o = Observable.of(1, 2, 3, 4, 5).pipe(
            \ Operators.timeout(100),
            \)

      Assert False(Observable.wait(o.subscribe({ v -> add(rs1, v) }), TIMEOUT))
      Assert Equals(rs1, [1, 2, 3, 4, 5])
      Assert Equals(rs2, [])

      Assert False(Observable.wait(o.subscribe({ v -> add(rs2, v) }), TIMEOUT))
      Assert Equals(rs1, [1, 2, 3, 4, 5])
      Assert Equals(rs2, [1, 2, 3, 4, 5])
    End
  End
End
